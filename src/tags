!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_PAGES	redbase.h	/^const int ALL_PAGES = -1;$/;"	v
AR	Makefile	/^AR             = ar -rc$/;"	m
ATTRTYPE	parser_internal.h	/^      } ATTRTYPE;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon20
ATTR_VAL	parser_internal.h	/^} ATTR_VAL;$/;"	t	typeref:struct:__anon2
AddCondition	ql_node.cc	/^RC QL_Node::AddCondition(const Condition condition, int condNum){$/;"	f	class:QL_Node
AddProj	ql_nodeproj.cc	/^RC QL_NodeProj::AddProj(int attrIndex){$/;"	f	class:QL_NodeProj
AddRelToBitmap	qo_manager.cc	/^RC QO_Manager::AddRelToBitmap(int relNum, int &bitmap){$/;"	f	class:QO_Manager
AllocateBlock	pf_buffermgr.cc	/^RC PF_BufferMgr::AllocateBlock(char *&buffer)$/;"	f	class:PF_BufferMgr
AllocateBlock	pf_manager.cc	/^RC PF_Manager::AllocateBlock(char *&buffer)$/;"	f	class:PF_Manager
AllocateNewPage	rm_filehandle.cc	/^RC RM_FileHandle::AllocateNewPage(PF_PageHandle &ph, PageNum &page){$/;"	f	class:RM_FileHandle
AllocatePage	pf_buffermgr.cc	/^RC PF_BufferMgr::AllocatePage(int fd, PageNum pageNum, char **ppBuffer)$/;"	f	class:PF_BufferMgr
AllocatePage	pf_filehandle.cc	/^RC PF_FileHandle::AllocatePage(PF_PageHandle &pageHandle)$/;"	f	class:PF_FileHandle
Append	linkedlist.h	/^inline void LinkList<T>::Append ( const T & item )$/;"	f	class:LinkList
Append	linkedlist.h	/^void LinkList<T>::Append ( const LinkList<T> & sourcell )$/;"	f	class:LinkList
ApplyEQCond	qo_manager.cc	/^RC QO_Manager::ApplyEQCond(map<int, attrStat> &attr_stats, int condIdx, float& numTuples){$/;"	f	class:QO_Manager
ApplyGTCond	qo_manager.cc	/^RC QO_Manager::ApplyGTCond(map<int, attrStat> &attr_stats, int condIdx, float& numTuples){$/;"	f	class:QO_Manager
ApplyLTCond	qo_manager.cc	/^RC QO_Manager::ApplyLTCond(map<int, attrStat> &attr_stats, int condIdx, float& numTuples){$/;"	f	class:QO_Manager
Attr	sm.h	/^typedef struct Attr{$/;"	s
Attr	sm.h	/^} Attr;$/;"	t	typeref:struct:Attr
AttrCatEntry	sm.h	/^typedef struct AttrCatEntry{$/;"	s
AttrCatEntry	sm.h	/^} AttrCatEntry;$/;"	t	typeref:struct:AttrCatEntry
AttrInfo	parser.h	/^struct AttrInfo{$/;"	s
AttrToRelIndex	ql_manager.cc	/^RC QL_Manager::AttrToRelIndex(const RelAttr attr, int& relIndex){$/;"	f	class:QL_Manager
AttrToRelIndex	qo_manager.cc	/^RC QO_Manager::AttrToRelIndex(const RelAttr attr, int& relIndex){$/;"	f	class:QO_Manager
AttrType	redbase.h	/^enum AttrType {$/;"	g
BEGIN	scan.cc	125;"	d	file:
BEGIN_SCAN	rm.h	138;"	d
BUILD_DIR	Makefile	/^BUILD_DIR      = ..\/build\/$/;"	m
Boolean	redbase.h	/^typedef char Boolean;$/;"	t
Boolean	statistics.h	/^typedef char Boolean;$/;"	t
CC	Makefile	/^CC             = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS         = -m32 -g -O1 -Wall $(STATS_OPTION) $(INC_DIRS)$/;"	m
CONDITION	parser_internal.h	/^      } CONDITION;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon18
CREATEINDEX	parser_internal.h	/^      } CREATEINDEX;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon6
CREATETABLE	parser_internal.h	/^      } CREATETABLE;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon5
CREATION_MASK	pf_internal.h	22;"	d
CalcCondsForRel	qo_manager.cc	/^RC QO_Manager::CalcCondsForRel(map<int, attrStat> & attrStats, int relsInJoin, int relIdx,$/;"	f	class:QO_Manager
CalcNumRecPerPage	rm_filehandle.cc	/^int RM_FileHandle::CalcNumRecPerPage(int recSize){$/;"	f	class:RM_FileHandle
CalcStats	sm_manager.cc	/^RC SM_Manager::CalcStats(const char *relName){$/;"	f	class:SM_Manager
CalculateJoin	qo_manager.cc	/^RC QO_Manager::CalculateJoin(int relsInJoin, int newRel, int relSize, $/;"	f	class:QO_Manager
CalculateNumPages	qo_manager.cc	/^float QO_Manager::CalculateNumPages(int numTuples, int tupleLength){$/;"	f	class:QO_Manager
CalculateOptJoin	qo_manager.cc	/^RC QO_Manager::CalculateOptJoin(int relsInJoin, int relSize){$/;"	f	class:QO_Manager
CheckBitSet	rm_filehandle.cc	/^RC RM_FileHandle::CheckBitSet(char *bitmap, int size, int bitnum, bool &set) const{$/;"	f	class:RM_FileHandle
CheckConditions	node_rel.cc	/^RC Node_Rel::CheckConditions(char *recData){$/;"	f	class:Node_Rel
CheckConditions	ql_node.cc	/^RC QL_Node::CheckConditions(char *recData){$/;"	f	class:QL_Node
CheckUpdateAttrs	ql_manager.cc	/^RC QL_Manager::CheckUpdateAttrs(const RelAttr &updAttr,$/;"	f	class:QL_Manager
CleanUpAttr	sm_manager.cc	/^RC SM_Manager::CleanUpAttr(Attr* attributes, int attrCount){$/;"	f	class:SM_Manager
CleanUpAttr	sm_stub.cc	/^RC SM_Manager::CleanUpAttr(Attr* attributes, int attrCount){$/;"	f	class:SM_Manager
CleanUpFH	rm_manager.cc	/^RC RM_Manager::CleanUpFH(RM_FileHandle &fileHandle){$/;"	f	class:RM_Manager
CleanUpNodes	ql_manager.cc	/^RC QL_Manager::CleanUpNodes(QL_Node *topNode){$/;"	f	class:QL_Manager
CleanUpRun	ql_manager.cc	/^RC QL_Manager::CleanUpRun(Attr* attributes, RM_FileHandle &relFH){$/;"	f	class:QL_Manager
ClearBitmap	qo_manager.cc	/^RC QO_Manager::ClearBitmap(int &bitmap){$/;"	f	class:QO_Manager
ClearBuffer	pf_buffermgr.cc	/^RC PF_BufferMgr::ClearBuffer()$/;"	f	class:PF_BufferMgr
ClearBuffer	pf_manager.cc	/^RC PF_Manager::ClearBuffer()$/;"	f	class:PF_Manager
ClientHint	redbase.h	/^enum ClientHint {$/;"	g
CloseDb	sm_manager.cc	/^RC SM_Manager::CloseDb()$/;"	f	class:SM_Manager
CloseDb	sm_stub.cc	/^RC SM_Manager::CloseDb()$/;"	f	class:SM_Manager
CloseFile	pf_manager.cc	/^RC PF_Manager::CloseFile(PF_FileHandle &fileHandle)$/;"	f	class:PF_Manager
CloseFile	rm_manager.cc	/^RC RM_Manager::CloseFile  (RM_FileHandle &fileHandle) {$/;"	f	class:RM_Manager
CloseIndex	ix_manager.cc	/^RC IX_Manager::CloseIndex(IX_IndexHandle &indexHandle)$/;"	f	class:IX_Manager
CloseIt	node_rel.cc	/^RC Node_Rel::CloseIt(){$/;"	f	class:Node_Rel
CloseIt	ql_nodejoin.cc	/^RC QL_NodeJoin::CloseIt(){$/;"	f	class:QL_NodeJoin
CloseIt	ql_nodeproj.cc	/^RC QL_NodeProj::CloseIt(){$/;"	f	class:QL_NodeProj
CloseIt	ql_noderel.cc	/^RC QL_NodeRel::CloseIt(){$/;"	f	class:QL_NodeRel
CloseIt	ql_nodesel.cc	/^RC QL_NodeSel::CloseIt(){$/;"	f	class:QL_NodeSel
CloseIterator	sm_attriterator.cc	/^RC SM_AttrIterator::CloseIterator(){$/;"	f	class:SM_AttrIterator
CloseScan	ix_indexscan.cc	/^RC IX_IndexScan::CloseScan()$/;"	f	class:IX_IndexScan
CloseScan	rm_filescan.cc	/^RC RM_FileScan::CloseScan () {$/;"	f	class:RM_FileScan
CompOp	redbase.h	/^enum CompOp {$/;"	g
Compute	qo_manager.cc	/^RC QO_Manager::Compute(QO_Rel *relOrder, float &costEst, float &tupleEst){$/;"	f	class:QO_Manager
Cond	ql_node.h	/^typedef struct Cond{$/;"	s
Cond	ql_node.h	/^} Cond;$/;"	t	typeref:struct:Cond
CondToAttrIdx	qo_manager.cc	/^RC QO_Manager::CondToAttrIdx(int condIndex, int &attrIdx1, int &attrIdx2){$/;"	f	class:QO_Manager
Condition	parser.h	/^struct Condition{$/;"	s
ConvertBitmapToVec	qo_manager.cc	/^RC QO_Manager::ConvertBitmapToVec(int bitmap, vector<int> &relsInJoin){$/;"	f	class:QO_Manager
ConvertStrToFloat	qo_manager.cc	/^float QO_Manager::ConvertStrToFloat(char *string){$/;"	f	class:QO_Manager
ConvertStrToFloat	sm_manager.cc	/^float SM_Manager::ConvertStrToFloat(char *string){$/;"	f	class:SM_Manager
ConvertValueToFloat	qo_manager.cc	/^RC QO_Manager::ConvertValueToFloat(int condIndex, float &value){$/;"	f	class:QO_Manager
ConvertVecToBitmap	qo_manager.cc	/^RC QO_Manager::ConvertVecToBitmap(vector<int> &relsInJoin, int &bitmap){$/;"	f	class:QO_Manager
CountNumConditions	ql_manager.cc	/^RC QL_Manager::CountNumConditions(int relIndex, int &numConds){$/;"	f	class:QL_Manager
CreateFile	pf_manager.cc	/^RC PF_Manager::CreateFile (const char *fileName)$/;"	f	class:PF_Manager
CreateFile	rm_manager.cc	/^RC RM_Manager::CreateFile (const char *fileName, int recordSize) { $/;"	f	class:RM_Manager
CreateIndex	ix_manager.cc	/^RC IX_Manager::CreateIndex(const char *fileName, int indexNo,$/;"	f	class:IX_Manager
CreateIndex	sm_manager.cc	/^RC SM_Manager::CreateIndex(const char *relName,$/;"	f	class:SM_Manager
CreateIndex	sm_stub.cc	/^RC SM_Manager::CreateIndex(const char *relName,$/;"	f	class:SM_Manager
CreateRecord	ql_manager.cc	/^RC QL_Manager::CreateRecord(char *recbuf, AttrCatEntry *aEntries, int nValues, const Value values[]){$/;"	f	class:QL_Manager
CreateTable	sm_manager.cc	/^RC SM_Manager::CreateTable(const char *relName,$/;"	f	class:SM_Manager
CreateTable	sm_stub.cc	/^RC SM_Manager::CreateTable(const char *relName,$/;"	f	class:SM_Manager
DELETE	parser_internal.h	/^      } DELETE;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon15
DROPINDEX	parser_internal.h	/^      } DROPINDEX;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon7
DROPTABLE	parser_internal.h	/^      } DROPTABLE;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon8
Data	linkedlist.h	/^           T Data;$/;"	m	struct:LinkList::InternalNode
DataAttrInfo	printer.h	/^    DataAttrInfo( const DataAttrInfo &d ) {$/;"	f	struct:DataAttrInfo
DataAttrInfo	printer.h	/^    DataAttrInfo() {$/;"	f	struct:DataAttrInfo
DataAttrInfo	printer.h	/^struct DataAttrInfo$/;"	s
Delete	linkedlist.h	/^inline void LinkList<T>::Delete(int which)$/;"	f	class:LinkList
Delete	pf_hashtable.cc	/^RC PF_HashTable::Delete(int fd, PageNum pageNum)$/;"	f	class:PF_HashTable
Delete	ql_manager.cc	/^RC QL_Manager::Delete(const char *relName,$/;"	f	class:QL_Manager
Delete	ql_manager_stub.cc	/^RC QL_Manager::Delete(const char *relName,$/;"	f	class:QL_Manager
DeleteEntry	ix_indexhandle.cc	/^RC IX_IndexHandle::DeleteEntry(void *pData, const RID &rid)$/;"	f	class:IX_IndexHandle
DeleteNodes	node_rel.cc	/^RC Node_Rel::DeleteNodes(){$/;"	f	class:Node_Rel
DeleteNodes	ql_nodejoin.cc	/^RC QL_NodeJoin::DeleteNodes(){$/;"	f	class:QL_NodeJoin
DeleteNodes	ql_nodeproj.cc	/^RC QL_NodeProj::DeleteNodes(){$/;"	f	class:QL_NodeProj
DeleteNodes	ql_noderel.cc	/^RC QL_NodeRel::DeleteNodes(){$/;"	f	class:QL_NodeRel
DeleteNodes	ql_nodesel.cc	/^RC QL_NodeSel::DeleteNodes(){$/;"	f	class:QL_NodeSel
DeleteRec	rm_filehandle.cc	/^RC RM_FileHandle::DeleteRec (const RID &rid) {$/;"	f	class:RM_FileHandle
DestroyFile	pf_manager.cc	/^RC PF_Manager::DestroyFile (const char *fileName)$/;"	f	class:PF_Manager
DestroyFile	rm_manager.cc	/^RC RM_Manager::DestroyFile(const char *fileName) {$/;"	f	class:RM_Manager
DestroyIndex	ix_manager.cc	/^RC IX_Manager::DestroyIndex(const char *fileName, int indexNo)$/;"	f	class:IX_Manager
DisposeBlock	pf_buffermgr.cc	/^RC PF_BufferMgr::DisposeBlock(char* buffer)$/;"	f	class:PF_BufferMgr
DisposeBlock	pf_manager.cc	/^RC PF_Manager::DisposeBlock(char *buffer)$/;"	f	class:PF_Manager
DisposePage	pf_filehandle.cc	/^RC PF_FileHandle::DisposePage(PageNum pageNum)$/;"	f	class:PF_FileHandle
DropIndex	sm_manager.cc	/^RC SM_Manager::DropIndex(const char *relName,$/;"	f	class:SM_Manager
DropIndex	sm_stub.cc	/^RC SM_Manager::DropIndex(const char *relName,$/;"	f	class:SM_Manager
DropTable	sm_manager.cc	/^RC SM_Manager::DropTable(const char *relName)$/;"	f	class:SM_Manager
DropTable	sm_stub.cc	/^RC SM_Manager::DropTable(const char *relName)$/;"	f	class:SM_Manager
ECHO	scan.cc	600;"	d	file:
END_IX_ERR	redbase.h	36;"	d
END_IX_WARN	redbase.h	47;"	d
END_PF_ERR	redbase.h	32;"	d
END_PF_WARN	redbase.h	43;"	d
END_QL_ERR	redbase.h	40;"	d
END_QL_WARN	redbase.h	51;"	d
END_RM_ERR	redbase.h	34;"	d
END_RM_WARN	redbase.h	45;"	d
END_SM_ERR	redbase.h	38;"	d
END_SM_WARN	redbase.h	49;"	d
EOB_ACT_CONTINUE_SCAN	scan.cc	168;"	d	file:
EOB_ACT_END_OF_FILE	scan.cc	169;"	d	file:
EOB_ACT_LAST_MATCH	scan.cc	170;"	d	file:
EQ_OP	redbase.h	/^    EQ_OP, NE_OP, LT_OP, GT_OP, LE_OP, GE_OP    \/\/ binary atomic operators$/;"	e	enum:CompOp
ERRFP	interp.cc	39;"	d	file:
EXECUTABLES	Makefile	/^EXECUTABLES    = $(UTILS) $(TESTS)$/;"	m
EXIT_SUCCESS	parse.cc	386;"	d	file:
EXIT_SUCCESS	parse.cc	414;"	d	file:
E_DUPLICATEATTR	interp.cc	32;"	d	file:
E_INCOMPATIBLE	interp.cc	25;"	d	file:
E_INVFORMATSTRING	interp.cc	30;"	d	file:
E_INVINTSIZE	interp.cc	28;"	d	file:
E_INVREALSIZE	interp.cc	29;"	d	file:
E_INVSTRLEN	interp.cc	31;"	d	file:
E_NOLENGTH	interp.cc	27;"	d	file:
E_OK	interp.cc	24;"	d	file:
E_STRINGTOOLONG	interp.cc	34;"	d	file:
E_TOOLONG	interp.cc	33;"	d	file:
E_TOOMANY	interp.cc	26;"	d	file:
Erase	linkedlist.h	/^inline void LinkList<T>::Erase()$/;"	f	class:LinkList
FALSE	redbase.h	89;"	d
FALSE	statistics.h	33;"	d
FLEXINT_H	scan.cc	29;"	d	file:
FLEX_BETA	scan.cc	13;"	d	file:
FLEX_SCANNER	scan.cc	8;"	d	file:
FLOAT	redbase.h	/^    FLOAT,$/;"	e	enum:AttrType
Find	pf_hashtable.cc	/^RC PF_HashTable::Find(int fd, PageNum pageNum, int &slot)$/;"	f	class:PF_HashTable
FindAttr	sm_manager.cc	/^RC SM_Manager::FindAttr(const char *relName, const char *attrName, RM_Record &attrRec, AttrCatEntry *&entry){$/;"	f	class:SM_Manager
FindAttr	sm_stub.cc	/^RC SM_Manager::FindAttr(const char *relName, const char *attrName, RM_Record &attrRec, AttrCatEntry *&entry){$/;"	f	class:SM_Manager
FlushPages	pf_buffermgr.cc	/^RC PF_BufferMgr::FlushPages(int fd)$/;"	f	class:PF_BufferMgr
FlushPages	pf_filehandle.cc	/^RC PF_FileHandle::FlushPages() const$/;"	f	class:PF_FileHandle
ForcePages	ix_indexhandle.cc	/^RC IX_IndexHandle::ForcePages()$/;"	f	class:IX_IndexHandle
ForcePages	pf_buffermgr.cc	/^RC PF_BufferMgr::ForcePages(int fd, PageNum pageNum)$/;"	f	class:PF_BufferMgr
ForcePages	pf_filehandle.cc	/^RC PF_FileHandle::ForcePages(PageNum pageNum) const$/;"	f	class:PF_FileHandle
ForcePages	rm_filehandle.cc	/^RC RM_FileHandle::ForcePages(PageNum pageNum) {$/;"	f	class:RM_FileHandle
GE_OP	redbase.h	/^    EQ_OP, NE_OP, LT_OP, GT_OP, LE_OP, GE_OP    \/\/ binary atomic operators$/;"	e	enum:CompOp
GT_OP	redbase.h	/^    EQ_OP, NE_OP, LT_OP, GT_OP, LE_OP, GE_OP    \/\/ binary atomic operators$/;"	e	enum:CompOp
Get	linkedlist.h	/^inline T* LinkList<T>::Get(int index)$/;"	f	class:LinkList
Get	statistics.cc	/^int *StatisticsMgr::Get(const char *psKey)$/;"	f	class:StatisticsMgr
GetAllRels	sm_manager.cc	/^RC SM_Manager::GetAllRels(RelCatEntry *relEntries, int nRelations, const char * const relations[],$/;"	f	class:SM_Manager
GetAttrCatEntry	ql_manager.cc	/^RC QL_Manager::GetAttrCatEntry(const RelAttr attr, AttrCatEntry *&entry){$/;"	f	class:QL_Manager
GetAttrCatEntryPos	ql_manager.cc	/^RC QL_Manager::GetAttrCatEntryPos(const RelAttr attr, int &index){$/;"	f	class:QL_Manager
GetAttrForRel	sm_manager.cc	/^RC SM_Manager::GetAttrForRel(RelCatEntry *relEntry, AttrCatEntry *aEntry, std::map<std::string, std::set<std::string> > &attrToRel){$/;"	f	class:SM_Manager
GetAttrList	ql_node.cc	/^RC QL_Node::GetAttrList(int *&attrList, int &attrListSize){$/;"	f	class:QL_Node
GetBlockSize	pf_buffermgr.cc	/^RC PF_BufferMgr::GetBlockSize(int &length) const$/;"	f	class:PF_BufferMgr
GetBlockSize	pf_manager.cc	/^RC PF_Manager::GetBlockSize(int &length) const$/;"	f	class:PF_Manager
GetData	pf_pagehandle.cc	/^RC PF_PageHandle::GetData(char *&pData) const$/;"	f	class:PF_PageHandle
GetData	rm_record.cc	/^RC RM_Record::GetData(char *&pData) const {$/;"	f	class:RM_Record
GetFirstPage	pf_filehandle.cc	/^RC PF_FileHandle::GetFirstPage(PF_PageHandle &pageHandle) const$/;"	f	class:PF_FileHandle
GetFirstZeroBit	rm_filehandle.cc	/^RC RM_FileHandle::GetFirstZeroBit(char *bitmap, int size, int &location){$/;"	f	class:RM_FileHandle
GetLastPage	pf_filehandle.cc	/^RC PF_FileHandle::GetLastPage(PF_PageHandle &pageHandle) const$/;"	f	class:PF_FileHandle
GetLength	linkedlist.h	/^inline int LinkList<T>::GetLength() const$/;"	f	class:LinkList
GetNext	node_rel.cc	/^RC Node_Rel::GetNext(char * data){$/;"	f	class:Node_Rel
GetNext	ql_nodejoin.cc	/^RC QL_NodeJoin::GetNext(char *data){$/;"	f	class:QL_NodeJoin
GetNext	ql_nodeproj.cc	/^RC QL_NodeProj::GetNext(char *data){$/;"	f	class:QL_NodeProj
GetNext	ql_noderel.cc	/^RC QL_NodeRel::GetNext(char *data){$/;"	f	class:QL_NodeRel
GetNext	ql_nodesel.cc	/^RC QL_NodeSel::GetNext(char *data){$/;"	f	class:QL_NodeSel
GetNextAttr	sm_attriterator.cc	/^RC SM_AttrIterator::GetNextAttr(RM_Record &attrRec, AttrCatEntry *&entry){$/;"	f	class:SM_AttrIterator
GetNextEntry	ix_indexscan.cc	/^RC IX_IndexScan::GetNextEntry(RID &rid)$/;"	f	class:IX_IndexScan
GetNextOneBit	rm_filehandle.cc	/^RC RM_FileHandle::GetNextOneBit(char *bitmap, int size, int start, int &location){$/;"	f	class:RM_FileHandle
GetNextPage	pf_filehandle.cc	/^RC PF_FileHandle::GetNextPage(PageNum current, PF_PageHandle &pageHandle) const$/;"	f	class:PF_FileHandle
GetNextRec	node_rel.cc	/^RC Node_Rel::GetNextRec(RM_Record &rec){$/;"	f	class:Node_Rel
GetNextRec	ql_nodejoin.cc	/^RC QL_NodeJoin::GetNextRec(RM_Record &rec){$/;"	f	class:QL_NodeJoin
GetNextRec	ql_nodeproj.cc	/^RC QL_NodeProj::GetNextRec(RM_Record &rec){$/;"	f	class:QL_NodeProj
GetNextRec	ql_noderel.cc	/^RC QL_NodeRel::GetNextRec(RM_Record &rec){$/;"	f	class:QL_NodeRel
GetNextRec	ql_nodesel.cc	/^RC QL_NodeSel::GetNextRec(RM_Record &rec){$/;"	f	class:QL_NodeSel
GetNextRec	rm_filescan.cc	/^RC RM_FileScan::GetNextRec(RM_Record &rec) {$/;"	f	class:RM_FileScan
GetNextRecData	node_rel.cc	/^RC Node_Rel::GetNextRecData(RM_Record &rec, char *&recData){$/;"	f	class:Node_Rel
GetNextRecord	rm_filehandle.cc	/^RC RM_FileHandle::GetNextRecord(PageNum page, SlotNum slot, RM_Record &rec, PF_PageHandle &ph, bool nextPage){$/;"	f	class:RM_FileHandle
GetNumRecOnPage	rm_filescan.cc	/^RC RM_FileScan::GetNumRecOnPage(PF_PageHandle &ph, int &numRecords){$/;"	f	class:RM_FileScan
GetPage	pf_buffermgr.cc	/^RC PF_BufferMgr::GetPage(int fd, PageNum pageNum, char **ppBuffer,$/;"	f	class:PF_BufferMgr
GetPageDataAndBitmap	rm_filehandle.cc	/^RC RM_FileHandle::GetPageDataAndBitmap(PF_PageHandle &ph, char *&bitmap, struct RM_PageHeader *&pageheader) const{$/;"	f	class:RM_FileHandle
GetPageNum	pf_pagehandle.cc	/^RC PF_PageHandle::GetPageNum(PageNum &_pageNum) const$/;"	f	class:PF_PageHandle
GetPageNum	rm_rid.cc	/^RC RID::GetPageNum(PageNum &pageNum) const {$/;"	f	class:RID
GetPageNumAndSlot	rm_filehandle.cc	/^RC RM_FileHandle::GetPageNumAndSlot(const RID &rid, PageNum &page, SlotNum &slot) const {$/;"	f	class:RM_FileHandle
GetPrevPage	pf_filehandle.cc	/^RC PF_FileHandle::GetPrevPage(PageNum current, PF_PageHandle &pageHandle) const$/;"	f	class:PF_FileHandle
GetRec	rm_filehandle.cc	/^RC RM_FileHandle::GetRec (const RID &rid, RM_Record &rec) const {$/;"	f	class:RM_FileHandle
GetRelEntry	sm_manager.cc	/^RC SM_Manager::GetRelEntry(const char *relName, RM_Record &relRec, RelCatEntry *&entry){$/;"	f	class:SM_Manager
GetRelEntry	sm_stub.cc	/^RC SM_Manager::GetRelEntry(const char *relName, RM_Record &relRec, RelCatEntry *&entry){$/;"	f	class:SM_Manager
GetRid	rm_record.cc	/^RC RM_Record::GetRid (RID &rid) const {$/;"	f	class:RM_Record
GetSlotNum	rm_rid.cc	/^RC RID::GetSlotNum(SlotNum &slotNum) const {$/;"	f	class:RID
GetThisPage	pf_filehandle.cc	/^RC PF_FileHandle::GetThisPage(PageNum pageNum, PF_PageHandle &pageHandle) const$/;"	f	class:PF_FileHandle
GetTupleLength	ql_node.cc	/^RC QL_Node::GetTupleLength(int &tupleLength){$/;"	f	class:QL_Node
HELP	parser_internal.h	/^      } HELP;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon11
Hash	pf_hashtable.h	/^    int Hash     (int fd, PageNum pageNum) const$/;"	f	class:PF_HashTable
Help	sm_manager.cc	/^RC SM_Manager::Help()$/;"	f	class:SM_Manager
Help	sm_manager.cc	/^RC SM_Manager::Help(const char *relName)$/;"	f	class:SM_Manager
Help	sm_stub.cc	/^RC SM_Manager::Help()$/;"	f	class:SM_Manager
Help	sm_stub.cc	/^RC SM_Manager::Help(const char *relName)$/;"	f	class:SM_Manager
INC_DIRS	Makefile	/^INC_DIRS       = -I.$/;"	m
INITIAL	scan.cc	506;"	d	file:
INSERT	parser_internal.h	/^      } INSERT;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon14
INT	redbase.h	/^    INT,$/;"	e	enum:AttrType
INT16_MAX	scan.cc	71;"	d	file:
INT16_MIN	scan.cc	62;"	d	file:
INT32_MAX	scan.cc	74;"	d	file:
INT32_MIN	scan.cc	65;"	d	file:
INT8_MAX	scan.cc	68;"	d	file:
INT8_MIN	scan.cc	59;"	d	file:
INVALID_PAGE	pf_pagehandle.cc	13;"	d	file:
INVALID_PAGE	rm_rid.h	/^  static const PageNum INVALID_PAGE = -1;$/;"	m	class:RID
INVALID_PAGE	sm.h	/^    static const PageNum INVALID_PAGE = -1;$/;"	m	class:SM_Manager
INVALID_RECORD_SIZE	rm.h	/^    static const int INVALID_RECORD_SIZE = -1;$/;"	m	class:RM_Record
INVALID_SLOT	pf_buffermgr.h	29;"	d
INVALID_SLOT	rm_rid.h	/^  static const SlotNum INVALID_SLOT = -1;$/;"	m	class:RID
INVALID_SLOT	sm.h	/^    static const SlotNum INVALID_SLOT = -1;$/;"	m	class:SM_Manager
IX_BADFILENAME	ix.h	91;"	d
IX_BADINDEXNAME	ix.h	87;"	d
IX_BADINDEXSPEC	ix.h	86;"	d
IX_DUPLICATEENTRY	ix.h	93;"	d
IX_EOF	ix.h	96;"	d
IX_ERROR	ix.h	99;"	d
IX_ErrorMsg	ix_error.cc	/^static char *IX_ErrorMsg[] = {$/;"	v	file:
IX_H	ix.h	8;"	d
IX_INVALIDBUCKET	ix.h	92;"	d
IX_INVALIDENTRY	ix.h	95;"	d
IX_INVALIDINDEXFILE	ix.h	89;"	d
IX_INVALIDINDEXHANDLE	ix.h	88;"	d
IX_INVALIDSCAN	ix.h	94;"	d
IX_IndexHandle	ix.h	/^class IX_IndexHandle {$/;"	c
IX_IndexHandle	ix_indexhandle.cc	/^IX_IndexHandle::IX_IndexHandle()$/;"	f	class:IX_IndexHandle
IX_IndexScan	ix.h	/^class IX_IndexScan {$/;"	c
IX_IndexScan	ix_indexscan.cc	/^IX_IndexScan::IX_IndexScan()$/;"	f	class:IX_IndexScan
IX_LASTERROR	ix.h	100;"	d
IX_LASTWARN	ix.h	97;"	d
IX_Manager	ix.h	/^class IX_Manager {$/;"	c
IX_Manager	ix_manager.cc	/^IX_Manager::IX_Manager(PF_Manager &pfm) $/;"	f	class:IX_Manager
IX_NODEFULL	ix.h	90;"	d
IX_OBJECTS	Makefile	/^IX_OBJECTS     = $(addprefix $(BUILD_DIR), $(IX_SOURCES:.cc=.o))$/;"	m
IX_PrintError	ix_error.cc	/^void IX_PrintError(RC rc)$/;"	f
IX_SOURCES	Makefile	/^IX_SOURCES     = ix_manager.cc ix_indexhandle.cc ix_indexscan.cc ix_error.cc$/;"	m
IX_WarnMsg	ix_error.cc	/^static char *IX_WarnMsg[] = {$/;"	v	file:
IndexToOffset	ql_node.cc	/^RC QL_Node::IndexToOffset(int index, int &offset, int &length){$/;"	f	class:QL_Node
InitPageDesc	pf_buffermgr.cc	/^RC PF_BufferMgr::InitPageDesc(int fd, PageNum pageNum, int slot)$/;"	f	class:PF_BufferMgr
InitializeBaseCases	qo_manager.cc	/^RC QO_Manager::InitializeBaseCases(){$/;"	f	class:QO_Manager
Insert	pf_hashtable.cc	/^RC PF_HashTable::Insert(int fd, PageNum pageNum, int slot)$/;"	f	class:PF_HashTable
Insert	ql_manager.cc	/^RC QL_Manager::Insert(const char *relName,$/;"	f	class:QL_Manager
Insert	ql_manager_stub.cc	/^RC QL_Manager::Insert(const char *relName,$/;"	f	class:QL_Manager
InsertAttrCat	sm_manager.cc	/^RC SM_Manager::InsertAttrCat(const char *relName, AttrInfo attr, int offset, int attrNum){$/;"	f	class:SM_Manager
InsertAttrCat	sm_stub.cc	/^RC SM_Manager::InsertAttrCat(const char *relName, AttrInfo attr, int offset, int attrNum){$/;"	f	class:SM_Manager
InsertEntry	ix_indexhandle.cc	/^RC IX_IndexHandle::InsertEntry(void *pData, const RID &rid)$/;"	f	class:IX_IndexHandle
InsertFree	pf_buffermgr.cc	/^RC PF_BufferMgr::InsertFree(int slot)$/;"	f	class:PF_BufferMgr
InsertIntoIndex	ql_manager.cc	/^RC QL_Manager::InsertIntoIndex(char *recbuf, RID recRID){$/;"	f	class:QL_Manager
InsertIntoRelation	ql_manager.cc	/^RC QL_Manager::InsertIntoRelation(const char *relName, int tupleLength, int nValues, const Value values[]){$/;"	f	class:QL_Manager
InsertRec	rm_filehandle.cc	/^RC RM_FileHandle::InsertRec (const char *pData, RID &rid) {$/;"	f	class:RM_FileHandle
InsertRelCat	sm_manager.cc	/^RC SM_Manager::InsertRelCat(const char *relName, int attrCount, int recSize){$/;"	f	class:SM_Manager
InsertRelCat	sm_stub.cc	/^RC SM_Manager::InsertRelCat(const char *relName, int attrCount, int recSize){$/;"	f	class:SM_Manager
InternalAlloc	pf_buffermgr.cc	/^RC PF_BufferMgr::InternalAlloc(int &slot)$/;"	f	class:PF_BufferMgr
InternalNode	linkedlist.h	/^      struct InternalNode {$/;"	s	class:LinkList
IsBitSet	qo_manager.cc	/^bool QO_Manager::IsBitSet(int relNum, int bitmap){$/;"	f	class:QO_Manager
IsRelNode	ql_nodejoin.cc	/^bool QL_NodeJoin::IsRelNode(){$/;"	f	class:QL_NodeJoin
IsRelNode	ql_nodeproj.cc	/^bool QL_NodeProj::IsRelNode(){$/;"	f	class:QL_NodeProj
IsRelNode	ql_noderel.cc	/^bool QL_NodeRel::IsRelNode(){$/;"	f	class:QL_NodeRel
IsRelNode	ql_nodesel.cc	/^bool QL_NodeSel::IsRelNode(){$/;"	f	class:QL_NodeSel
IsValidAttr	ql_manager.cc	/^bool QL_Manager::IsValidAttr(const RelAttr attr){$/;"	f	class:QL_Manager
IsValidIndexCond	qo_manager.cc	/^RC QO_Manager::IsValidIndexCond(int relsJoined, int condIndex, int relIdx, int &attrIndex){$/;"	f	class:QO_Manager
IsValidPageNum	pf_filehandle.cc	/^int PF_FileHandle::IsValidPageNum(PageNum pageNum) const$/;"	f	class:PF_FileHandle
JoinRelation	ql_manager.cc	/^RC QL_Manager::JoinRelation(QL_Node *&topNode, QL_Node *currNode, int relIndex){$/;"	f	class:QL_Manager
JoinRelationWithQO	ql_manager.cc	/^RC QL_Manager::JoinRelationWithQO(QL_Node *&topNode, QO_Rel* qorels, QL_Node *currNode, int qoIdx){$/;"	f	class:QL_Manager
LEX	Makefile	/^LEX            = flex$/;"	m
LE_OP	redbase.h	/^    EQ_OP, NE_OP, LT_OP, GT_OP, LE_OP, GE_OP    \/\/ binary atomic operators$/;"	e	enum:CompOp
LIBRARIES	Makefile	/^LIBRARIES      = $(LIBRARY_PF) $(LIBRARY_RM) $(LIBRARY_IX) \\$/;"	m
LIBRARY_IX	Makefile	/^LIBRARY_IX     = $(LIB_DIR)libix.a$/;"	m
LIBRARY_PARSER	Makefile	/^LIBRARY_PARSER = $(LIB_DIR)libparser.a$/;"	m
LIBRARY_PF	Makefile	/^LIBRARY_PF     = $(LIB_DIR)libpf.a$/;"	m
LIBRARY_QL	Makefile	/^LIBRARY_QL     = $(LIB_DIR)libql.a$/;"	m
LIBRARY_RM	Makefile	/^LIBRARY_RM     = $(LIB_DIR)librm.a$/;"	m
LIBRARY_SM	Makefile	/^LIBRARY_SM     = $(LIB_DIR)libsm.a$/;"	m
LIBS	Makefile	/^LIBS           = -lparser -lql -lsm -lix -lrm -lpf$/;"	m
LIB_DIR	Makefile	/^LIB_DIR        = ..\/lib\/$/;"	m
LIST	parser_internal.h	/^      } LIST;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon23
LOAD	parser_internal.h	/^      } LOAD;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon9
LT_OP	redbase.h	/^    EQ_OP, NE_OP, LT_OP, GT_OP, LE_OP, GE_OP    \/\/ binary atomic operators$/;"	e	enum:CompOp
L_SET	pf_internal.h	30;"	d
LinkHead	pf_buffermgr.cc	/^RC PF_BufferMgr::LinkHead(int slot)$/;"	f	class:PF_BufferMgr
LinkList	linkedlist.h	/^LinkList<T>::LinkList ( const LinkList<T> & sourcell )$/;"	f	class:LinkList
LinkList	linkedlist.h	/^class LinkList$/;"	c
LinkList	linkedlist.h	/^inline LinkList<T>::LinkList ()$/;"	f	class:LinkList
Load	sm_manager.cc	/^RC SM_Manager::Load(const char *relName,$/;"	f	class:SM_Manager
Load	sm_stub.cc	/^RC SM_Manager::Load(const char *relName,$/;"	f	class:SM_Manager
MAXATTRS	redbase.h	17;"	d
MAXCHAR	scanhelp.c	19;"	d	file:
MAXNAME	redbase.h	13;"	d
MAXNODE	nodes.cc	21;"	d	file:
MAXPRINTSTRING	printer.h	15;"	d
MAXSTRINGLEN	redbase.h	15;"	d
MAX_DB_NAME	sm.h	23;"	d
MEMORY_FD	pf_buffermgr.cc	921;"	d	file:
MarkDirty	pf_buffermgr.cc	/^RC PF_BufferMgr::MarkDirty(int fd, PageNum pageNum)$/;"	f	class:PF_BufferMgr
MarkDirty	pf_filehandle.cc	/^RC PF_FileHandle::MarkDirty(PageNum pageNum) const$/;"	f	class:PF_FileHandle
NE_OP	redbase.h	/^    EQ_OP, NE_OP, LT_OP, GT_OP, LE_OP, GE_OP    \/\/ binary atomic operators$/;"	e	enum:CompOp
NODE	parser_internal.h	/^} NODE;$/;"	t	typeref:struct:node
NODEKIND	parser_internal.h	/^} NODEKIND;$/;"	t	typeref:enum:__anon3
NOTOKEN	parse.cc	/^     NOTOKEN = 283,$/;"	e	enum:yytokentype	file:
NOTOKEN	parse.cc	234;"	d	file:
NOTOKEN	y.tab.h	/^     NOTOKEN = 283,$/;"	e	enum:yytokentype
NOTOKEN	y.tab.h	106;"	d
NO_FREE_PAGES	rm.h	/^    static const PageNum NO_FREE_PAGES = -1;$/;"	m	class:RM_FileHandle
NO_HINT	redbase.h	/^    NO_HINT                                     \/\/ default value$/;"	e	enum:ClientHint
NO_INDEXES	sm.h	/^    static const int NO_INDEXES = -1;$/;"	m	class:SM_Manager
NO_MORE_FREE_PAGES	rm_internal.h	13;"	d
NO_OP	redbase.h	/^    NO_OP,                                      \/\/ no comparison$/;"	e	enum:CompOp
NULL	redbase.h	97;"	d
NULL	statistics.h	37;"	d
N_ATTRTYPE	parser_internal.h	/^    N_ATTRTYPE,$/;"	e	enum:__anon3
N_CONDITION	parser_internal.h	/^    N_CONDITION,$/;"	e	enum:__anon3
N_CREATEINDEX	parser_internal.h	/^    N_CREATEINDEX,$/;"	e	enum:__anon3
N_CREATETABLE	parser_internal.h	/^    N_CREATETABLE,$/;"	e	enum:__anon3
N_DELETE	parser_internal.h	/^    N_DELETE,$/;"	e	enum:__anon3
N_DROPINDEX	parser_internal.h	/^    N_DROPINDEX,$/;"	e	enum:__anon3
N_DROPTABLE	parser_internal.h	/^    N_DROPTABLE,$/;"	e	enum:__anon3
N_HELP	parser_internal.h	/^    N_HELP,$/;"	e	enum:__anon3
N_INSERT	parser_internal.h	/^    N_INSERT,$/;"	e	enum:__anon3
N_LIST	parser_internal.h	/^    N_LIST$/;"	e	enum:__anon3
N_LOAD	parser_internal.h	/^    N_LOAD,$/;"	e	enum:__anon3
N_PRINT	parser_internal.h	/^    N_PRINT,$/;"	e	enum:__anon3
N_QUERY	parser_internal.h	/^    N_QUERY,$/;"	e	enum:__anon3
N_RELATION	parser_internal.h	/^    N_RELATION,$/;"	e	enum:__anon3
N_RELATTR	parser_internal.h	/^    N_RELATTR,$/;"	e	enum:__anon3
N_RELATTR_OR_VALUE	parser_internal.h	/^    N_RELATTR_OR_VALUE,$/;"	e	enum:__anon3
N_SET	parser_internal.h	/^    N_SET,$/;"	e	enum:__anon3
N_STATISTICS	parser_internal.h	/^    N_STATISTICS,$/;"	e	enum:__anon3
N_UPDATE	parser_internal.h	/^    N_UPDATE,$/;"	e	enum:__anon3
N_VALUE	parser_internal.h	/^    N_VALUE,$/;"	e	enum:__anon3
Node_Proj	node_proj.cc	/^Node_Proj::Node_Proj(){$/;"	f	class:Node_Proj
Node_Rel	node_rel.cc	/^Node_Rel::Node_Rel(QL_Manager &qlm, RelCatEntry* rEntry) : QL_Node(qlm) {$/;"	f	class:Node_Rel
NormalizeStats	qo_manager.cc	/^RC QO_Manager::NormalizeStats(map<int, attrStat> &attr_stats, float frac, float numTuples, int attrIdx1, int attrIdx2){$/;"	f	class:QO_Manager
NumBitsToCharSize	rm_filehandle.cc	/^int RM_FileHandle::NumBitsToCharSize(int size){$/;"	f	class:RM_FileHandle
OBJECTS	Makefile	/^OBJECTS        = $(PF_OBJECTS) $(RM_OBJECTS) $(IX_OBJECTS) \\$/;"	m
OK_RC	redbase.h	29;"	d
OpenAndLoadFile	sm_manager.cc	/^RC SM_Manager::OpenAndLoadFile(RM_FileHandle &relFH, const char *fileName, Attr* attributes, int attrCount, $/;"	f	class:SM_Manager
OpenAndLoadFile	sm_stub.cc	/^RC SM_Manager::OpenAndLoadFile(RM_FileHandle &relFH, const char *fileName, Attr* attributes, int attrCount, $/;"	f	class:SM_Manager
OpenDb	sm_manager.cc	/^RC SM_Manager::OpenDb(const char *dbName)$/;"	f	class:SM_Manager
OpenDb	sm_stub.cc	/^RC SM_Manager::OpenDb(const char *dbName)$/;"	f	class:SM_Manager
OpenFile	pf_manager.cc	/^RC PF_Manager::OpenFile (const char *fileName, PF_FileHandle &fileHandle)$/;"	f	class:PF_Manager
OpenFile	rm_manager.cc	/^RC RM_Manager::OpenFile   (const char *fileName, RM_FileHandle &fileHandle){$/;"	f	class:RM_Manager
OpenIndex	ix_manager.cc	/^RC IX_Manager::OpenIndex(const char *fileName, int indexNo,$/;"	f	class:IX_Manager
OpenIt	node_rel.cc	/^RC Node_Rel::OpenIt(){$/;"	f	class:Node_Rel
OpenIt	ql_nodejoin.cc	/^RC QL_NodeJoin::OpenIt(){$/;"	f	class:QL_NodeJoin
OpenIt	ql_nodejoin.cc	/^RC QL_NodeJoin::OpenIt(void *data){$/;"	f	class:QL_NodeJoin
OpenIt	ql_nodeproj.cc	/^RC QL_NodeProj::OpenIt(){$/;"	f	class:QL_NodeProj
OpenIt	ql_nodeproj.cc	/^RC QL_NodeProj::OpenIt(void *data){$/;"	f	class:QL_NodeProj
OpenIt	ql_noderel.cc	/^RC QL_NodeRel::OpenIt(){$/;"	f	class:QL_NodeRel
OpenIt	ql_noderel.cc	/^RC QL_NodeRel::OpenIt(void *data){$/;"	f	class:QL_NodeRel
OpenIt	ql_nodesel.cc	/^RC QL_NodeSel::OpenIt(){$/;"	f	class:QL_NodeSel
OpenIt	ql_nodesel.cc	/^RC QL_NodeSel::OpenIt(void *data){$/;"	f	class:QL_NodeSel
OpenIterator	sm_attriterator.cc	/^RC SM_AttrIterator::OpenIterator(RM_FileHandle &fh, char *relName){$/;"	f	class:SM_AttrIterator
OpenScan	ix_indexscan.cc	/^RC IX_IndexScan::OpenScan(const IX_IndexHandle &indexHandle,$/;"	f	class:IX_IndexScan
OpenScan	rm_filescan.cc	/^RC RM_FileScan::OpenScan (const RM_FileHandle &fileHandle,$/;"	f	class:RM_FileScan
PARSER_H	parser.h	7;"	d
PARSER_INTERNAL_H	parser_internal.h	11;"	d
PARSER_OBJECTS	Makefile	/^PARSER_OBJECTS = $(addprefix $(BUILD_DIR), $(PARSER_SOURCES:.c=.o))$/;"	m
PARSER_SOURCES	Makefile	/^PARSER_SOURCES = scan.c parse.c nodes.c interp.c$/;"	m
PF_BUFFERMGR_H	pf_buffermgr.h	16;"	d
PF_BUFFER_SIZE	pf_internal.h	/^const int PF_BUFFER_SIZE = 40;     \/\/ Number of pages in the buffer$/;"	v
PF_BufPageDesc	pf_buffermgr.h	/^struct PF_BufPageDesc {$/;"	s
PF_BufferMgr	pf_buffermgr.cc	/^PF_BufferMgr::PF_BufferMgr(int _numPages) : hashTable(PF_HASH_TBL_SIZE)$/;"	f	class:PF_BufferMgr
PF_BufferMgr	pf_buffermgr.h	/^class PF_BufferMgr {$/;"	c
PF_CLOSEDFILE	pf.h	170;"	d
PF_EOF	pf.h	173;"	d
PF_ErrorMsg	pf_error.cc	/^static char *PF_ErrorMsg[] = {$/;"	v	file:
PF_FILEOPEN	pf.h	169;"	d
PF_FILE_HDR_SIZE	pf_internal.h	/^const int PF_FILE_HDR_SIZE = PF_PAGE_SIZE + sizeof(PF_PageHdr);$/;"	v
PF_FLUSHPAGES	statistics.cc	/^const char *PF_FLUSHPAGES = "FLUSHPAGES";$/;"	v
PF_FileHandle	pf.h	/^class PF_FileHandle {$/;"	c
PF_FileHandle	pf_filehandle.cc	/^PF_FileHandle::PF_FileHandle()$/;"	f	class:PF_FileHandle
PF_FileHandle	pf_filehandle.cc	/^PF_FileHandle::PF_FileHandle(const PF_FileHandle &fileHandle)$/;"	f	class:PF_FileHandle
PF_FileHdr	pf.h	/^struct PF_FileHdr {$/;"	s
PF_GETPAGE	statistics.cc	/^const char *PF_GETPAGE = "GETPAGE";$/;"	v
PF_H	pf.h	17;"	d
PF_HASHNOTFOUND	pf.h	186;"	d
PF_HASHPAGEEXIST	pf.h	187;"	d
PF_HASHTABLE_H	pf_hashtable.h	9;"	d
PF_HASH_TBL_SIZE	pf_internal.h	/^const int PF_HASH_TBL_SIZE = 20;   \/\/ Size of hash table$/;"	v
PF_HDRREAD	pf.h	181;"	d
PF_HDRWRITE	pf.h	182;"	d
PF_HashEntry	pf_hashtable.h	/^struct PF_HashEntry {$/;"	s
PF_HashTable	pf_hashtable.cc	/^PF_HashTable::PF_HashTable(int _numBuckets)$/;"	f	class:PF_HashTable
PF_HashTable	pf_hashtable.h	/^class PF_HashTable {$/;"	c
PF_INCOMPLETEREAD	pf.h	179;"	d
PF_INCOMPLETEWRITE	pf.h	180;"	d
PF_INTERNAL_H	pf_internal.h	10;"	d
PF_INVALIDNAME	pf.h	188;"	d
PF_INVALIDPAGE	pf.h	168;"	d
PF_LASTERROR	pf.h	192;"	d
PF_LASTWARN	pf.h	175;"	d
PF_Manager	pf.h	/^class PF_Manager {$/;"	c
PF_Manager	pf_manager.cc	/^PF_Manager::PF_Manager()$/;"	f	class:PF_Manager
PF_NOBUF	pf.h	178;"	d
PF_NOMEM	pf.h	177;"	d
PF_OBJECTS	Makefile	/^PF_OBJECTS     = $(addprefix $(BUILD_DIR), $(PF_SOURCES:.cc=.o))$/;"	m
PF_PAGEFOUND	statistics.cc	/^const char *PF_PAGEFOUND = "PAGEFOUND";$/;"	v
PF_PAGEFREE	pf.h	171;"	d
PF_PAGEINBUF	pf.h	185;"	d
PF_PAGENOTFOUND	statistics.cc	/^const char *PF_PAGENOTFOUND = "PAGENOTFOUND";$/;"	v
PF_PAGENOTINBUF	pf.h	167;"	d
PF_PAGEPINNED	pf.h	166;"	d
PF_PAGEUNPINNED	pf.h	172;"	d
PF_PAGE_LIST_END	pf_internal.h	23;"	d
PF_PAGE_SIZE	pf.h	/^const int PF_PAGE_SIZE = 4096 - sizeof(int);$/;"	v
PF_PAGE_USED	pf_internal.h	24;"	d
PF_PageHandle	pf.h	/^class PF_PageHandle {$/;"	c
PF_PageHandle	pf_pagehandle.cc	/^PF_PageHandle::PF_PageHandle()$/;"	f	class:PF_PageHandle
PF_PageHandle	pf_pagehandle.cc	/^PF_PageHandle::PF_PageHandle(const PF_PageHandle &pageHandle)$/;"	f	class:PF_PageHandle
PF_PageHdr	pf_internal.h	/^struct PF_PageHdr {$/;"	s
PF_PrintError	pf_error.cc	/^void PF_PrintError(RC rc)$/;"	f
PF_READPAGE	statistics.cc	/^const char *PF_READPAGE = "READPAGE";           \/\/ IO$/;"	v
PF_SOURCES	Makefile	/^PF_SOURCES     = pf_buffermgr.cc pf_error.cc pf_filehandle.cc \\$/;"	m
PF_Statistics	pf_statistics.cc	/^void PF_Statistics()$/;"	f
PF_TOOSMALL	pf.h	174;"	d
PF_UNIX	pf.h	191;"	d
PF_WRITEPAGE	statistics.cc	/^const char *PF_WRITEPAGE = "WRITEPAGE";         \/\/ IO$/;"	v
PF_WarnMsg	pf_error.cc	/^static char *PF_WarnMsg[] = {$/;"	v	file:
PRINT	parser_internal.h	/^      } PRINT;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon12
PROMPT	parser_internal.h	23;"	d
PageNum	pf.h	/^typedef int PageNum;$/;"	t
PageNum	rm_rid.h	/^typedef int PageNum;$/;"	t
ParseConditions	ql_manager.cc	/^RC QL_Manager::ParseConditions(int nConditions, const Condition conditions[]){$/;"	f	class:QL_Manager
ParseRelNoDup	ql_manager.cc	/^RC QL_Manager::ParseRelNoDup(int nRelations, const char * const relations[]){$/;"	f	class:QL_Manager
ParseSelectAttrs	ql_manager.cc	/^RC QL_Manager::ParseSelectAttrs(int nSelAttrs, const RelAttr selAttrs[]){$/;"	f	class:QL_Manager
PrepareAttr	sm_manager.cc	/^RC SM_Manager::PrepareAttr(RelCatEntry *rEntry, Attr* attributes){$/;"	f	class:SM_Manager
PrepareAttr	sm_stub.cc	/^RC SM_Manager::PrepareAttr(RelCatEntry *rEntry, Attr* attributes){$/;"	f	class:SM_Manager
Print	printer.cc	/^void Printer::Print(ostream &c, const char * const data)$/;"	f	class:Printer
Print	printer.cc	/^void Printer::Print(ostream &c, const void * const data[])$/;"	f	class:Printer
Print	sm_manager.cc	/^RC SM_Manager::Print(const char *relName)$/;"	f	class:SM_Manager
Print	sm_stub.cc	/^RC SM_Manager::Print(const char *relName)$/;"	f	class:SM_Manager
Print	statistics.cc	/^RC StatisticsMgr::Print(const char *psKey)$/;"	f	class:StatisticsMgr
Print	statistics.cc	/^void StatisticsMgr::Print()$/;"	f	class:StatisticsMgr
PrintBuffer	pf_buffermgr.cc	/^RC PF_BufferMgr::PrintBuffer()$/;"	f	class:PF_BufferMgr
PrintBuffer	pf_manager.cc	/^RC PF_Manager::PrintBuffer()$/;"	f	class:PF_Manager
PrintCondition	ql_node.cc	/^RC QL_Node::PrintCondition(const Condition condition){$/;"	f	class:QL_Node
PrintError	parse.cc	/^void PrintError(RC rc)$/;"	f
PrintFooter	printer.cc	/^void Printer::PrintFooter(ostream &c) const$/;"	f	class:Printer
PrintHeader	printer.cc	/^void Printer::PrintHeader( ostream &c ) const$/;"	f	class:Printer
PrintNode	node_rel.cc	/^RC Node_Rel::PrintNode(int numTabs){$/;"	f	class:Node_Rel
PrintNode	ql_nodejoin.cc	/^RC QL_NodeJoin::PrintNode(int numTabs){$/;"	f	class:QL_NodeJoin
PrintNode	ql_nodeproj.cc	/^RC QL_NodeProj::PrintNode(int numTabs){$/;"	f	class:QL_NodeProj
PrintNode	ql_noderel.cc	/^RC QL_NodeRel::PrintNode(int numTabs){$/;"	f	class:QL_NodeRel
PrintNode	ql_nodesel.cc	/^RC QL_NodeSel::PrintNode(int numTabs){$/;"	f	class:QL_NodeSel
PrintPageStats	sm_manager.cc	/^RC SM_Manager::PrintPageStats(){$/;"	f	class:SM_Manager
PrintRels	qo_manager.cc	/^RC QO_Manager::PrintRels(){$/;"	f	class:QO_Manager
PrintStats	sm_manager.cc	/^RC SM_Manager::PrintStats(const char *relName){$/;"	f	class:SM_Manager
Printer	printer.cc	/^Printer::Printer(const DataAttrInfo *attributes_, const int attrCount_)$/;"	f	class:Printer
Printer	printer.h	/^class Printer {$/;"	c
QL_ATTRNOTFOUND	ql.h	181;"	d
QL_BADCALL	ql.h	183;"	d
QL_BADCOND	ql.h	182;"	d
QL_BADINSERT	ql.h	178;"	d
QL_BADSELECTATTR	ql.h	180;"	d
QL_BADUPDATE	ql.h	185;"	d
QL_CONDNOTMET	ql.h	184;"	d
QL_DUPRELATION	ql.h	179;"	d
QL_EOI	ql.h	186;"	d
QL_ERROR	ql.h	192;"	d
QL_ErrorMsg	ql_error.cc	/^static char *QL_ErrorMsg[] = {$/;"	v	file:
QL_H	ql.h	9;"	d
QL_INVALIDDB	ql.h	191;"	d
QL_LASTERROR	ql.h	193;"	d
QL_LASTWARN	ql.h	189;"	d
QL_Manager	ql.h	/^class QL_Manager {$/;"	c
QL_Manager	ql_manager.cc	/^QL_Manager::QL_Manager(SM_Manager &smm, IX_Manager &ixm, RM_Manager &rmm) : rmm(rmm), ixm(ixm), smm(smm)$/;"	f	class:QL_Manager
QL_Manager	ql_manager_stub.cc	/^QL_Manager::QL_Manager(SM_Manager &smm, IX_Manager &ixm, RM_Manager &rmm)$/;"	f	class:QL_Manager
QL_NODE_H	ql_node.h	7;"	d
QL_Node	node.cc	/^QL_Node::QL_Node(){$/;"	f	class:QL_Node
QL_Node	ql_node.cc	/^QL_Node::QL_Node(QL_Manager &qlm) : qlm(qlm) {$/;"	f	class:QL_Node
QL_Node	ql_node.h	/^class QL_Node {$/;"	c
QL_NodeJoin	ql_node.h	/^class QL_NodeJoin: public QL_Node {$/;"	c
QL_NodeJoin	ql_nodejoin.cc	/^QL_NodeJoin::QL_NodeJoin(QL_Manager &qlm, QL_Node &node1, QL_Node &node2) : $/;"	f	class:QL_NodeJoin
QL_NodeProj	ql_node.h	/^class QL_NodeProj: public QL_Node {$/;"	c
QL_NodeProj	ql_nodeproj.cc	/^QL_NodeProj::QL_NodeProj(QL_Manager &qlm, QL_Node &prevNode) : QL_Node(qlm), prevNode(prevNode) {$/;"	f	class:QL_NodeProj
QL_NodeRel	ql_node.h	/^class QL_NodeRel: public QL_Node {$/;"	c
QL_NodeRel	ql_noderel.cc	/^QL_NodeRel::QL_NodeRel(QL_Manager &qlm, RelCatEntry *rEntry) : QL_Node(qlm){$/;"	f	class:QL_NodeRel
QL_NodeSel	ql_node.h	/^class QL_NodeSel: public QL_Node {$/;"	c
QL_NodeSel	ql_nodesel.cc	/^QL_NodeSel::QL_NodeSel(QL_Manager &qlm, QL_Node &prevNode) : QL_Node(qlm), prevNode(prevNode) {$/;"	f	class:QL_NodeSel
QL_OBJECTS	Makefile	/^QL_OBJECTS     = $(addprefix $(BUILD_DIR), $(QL_SOURCES:.cc=.o))$/;"	m
QL_PrintError	ql_error.cc	/^void QL_PrintError(RC rc)$/;"	f
QL_PrintError	ql_manager_stub.cc	/^void QL_PrintError(RC rc)$/;"	f
QL_SOURCES	Makefile	/^QL_SOURCES     = ql_error.cc ql_manager.cc ql_node.cc ql_nodeproj.cc ql_noderel.cc ql_nodejoin.cc ql_nodesel.cc qo_manager.cc$/;"	m
QL_WarnMsg	ql_error.cc	/^static char *QL_WarnMsg[] = {$/;"	v	file:
QO_BADCONDITION	ql.h	187;"	d
QO_H	qo.h	9;"	d
QO_INVALIDBIT	ql.h	188;"	d
QO_Manager	qo.h	/^class QO_Manager{$/;"	c
QO_Manager	qo_manager.cc	/^QO_Manager::QO_Manager(QL_Manager &qlm, int nRelations, RelCatEntry *relations, int nAttributes, AttrCatEntry *attributes, $/;"	f	class:QO_Manager
QO_Rel	ql.h	/^typedef struct QO_Rel{$/;"	s
QO_Rel	ql.h	/^} QO_Rel;$/;"	t	typeref:struct:QO_Rel
QUERY	parser_internal.h	/^      } QUERY;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon13
RANLIB	Makefile	/^RANLIB         = ranlib$/;"	m
RBparse	parse.cc	/^void RBparse(PF_Manager &pfm, SM_Manager &smm, QL_Manager &qlm)$/;"	f
RC	redbase.h	/^typedef int RC;$/;"	t
RC	statistics.h	/^typedef int RC;$/;"	t
REDBASE_H	redbase.h	6;"	d
REJECT	scan.cc	478;"	d	file:
RELATION	parser_internal.h	/^      } RELATION;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon22
RELATTR	parser_internal.h	/^      } RELATTR;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon17
RELATTR_OR_VALUE	parser_internal.h	/^      } RELATTR_OR_VALUE;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon19
REL_ATTR	parser_internal.h	/^} REL_ATTR;$/;"	t	typeref:struct:__anon1
RID	rm_rid.cc	/^RID::RID(){$/;"	f	class:RID
RID	rm_rid.cc	/^RID::RID(PageNum pageNum, SlotNum slotNum) {$/;"	f	class:RID
RID	rm_rid.h	/^class RID {$/;"	c
RM_BADFILENAME	rm.h	226;"	d
RM_BADRECORDSIZE	rm.h	217;"	d
RM_ENDOFPAGE	rm.h	224;"	d
RM_EOF	rm.h	225;"	d
RM_ERROR	rm.h	229;"	d
RM_ErrorMsg	rm_error.cc	/^static char *RM_ErrorMsg[] = {$/;"	v	file:
RM_FileHandle	rm.h	/^class RM_FileHandle {$/;"	c
RM_FileHandle	rm_filehandle.cc	/^RM_FileHandle::RM_FileHandle(){$/;"	f	class:RM_FileHandle
RM_FileHeader	rm.h	/^struct RM_FileHeader {$/;"	s
RM_FileScan	rm.h	/^class RM_FileScan {$/;"	c
RM_FileScan	rm_filescan.cc	/^RM_FileScan::RM_FileScan(){$/;"	f	class:RM_FileScan
RM_H	rm.h	11;"	d
RM_INTERNAL_H	rm_internal.h	8;"	d
RM_INVALIDBITOPERATION	rm.h	219;"	d
RM_INVALIDFILE	rm.h	221;"	d
RM_INVALIDFILEHANDLE	rm.h	222;"	d
RM_INVALIDRECORD	rm.h	218;"	d
RM_INVALIDRID	rm.h	216;"	d
RM_INVALIDSCAN	rm.h	223;"	d
RM_LASTERROR	rm.h	230;"	d
RM_LASTWARN	rm.h	227;"	d
RM_Manager	rm.h	/^class RM_Manager {$/;"	c
RM_Manager	rm_manager.cc	/^RM_Manager::RM_Manager(PF_Manager &pfm) : pfm(pfm){$/;"	f	class:RM_Manager
RM_OBJECTS	Makefile	/^RM_OBJECTS     = $(addprefix $(BUILD_DIR), $(RM_SOURCES:.cc=.o))$/;"	m
RM_PAGEFULL	rm.h	220;"	d
RM_PageHeader	rm_internal.h	/^struct RM_PageHeader {$/;"	s
RM_PrintError	rm_error.cc	/^void RM_PrintError(RC rc)$/;"	f
RM_RID_H	rm_rid.h	8;"	d
RM_Record	rm.h	/^class RM_Record {$/;"	c
RM_Record	rm_record.cc	/^RM_Record::RM_Record(){$/;"	f	class:RM_Record
RM_SOURCES	Makefile	/^RM_SOURCES     = rm_manager.cc rm_filehandle.cc rm_record.cc \\$/;"	m
RM_WarnMsg	rm_error.cc	/^static char *RM_WarnMsg[] = {$/;"	v	file:
RW_AND	parse.cc	/^     RW_AND = 273,$/;"	e	enum:yytokentype	file:
RW_AND	parse.cc	224;"	d	file:
RW_AND	y.tab.h	/^     RW_AND = 273,$/;"	e	enum:yytokentype
RW_AND	y.tab.h	96;"	d
RW_BUFFER	parse.cc	/^     RW_BUFFER = 286,$/;"	e	enum:yytokentype	file:
RW_BUFFER	parse.cc	237;"	d	file:
RW_BUFFER	y.tab.h	/^     RW_BUFFER = 286,$/;"	e	enum:yytokentype
RW_BUFFER	y.tab.h	109;"	d
RW_CREATE	parse.cc	/^     RW_CREATE = 258,$/;"	e	enum:yytokentype	file:
RW_CREATE	parse.cc	209;"	d	file:
RW_CREATE	y.tab.h	/^     RW_CREATE = 258,$/;"	e	enum:yytokentype
RW_CREATE	y.tab.h	81;"	d
RW_DELETE	parse.cc	/^     RW_DELETE = 271,$/;"	e	enum:yytokentype	file:
RW_DELETE	parse.cc	222;"	d	file:
RW_DELETE	y.tab.h	/^     RW_DELETE = 271,$/;"	e	enum:yytokentype
RW_DELETE	y.tab.h	94;"	d
RW_DROP	parse.cc	/^     RW_DROP = 259,$/;"	e	enum:yytokentype	file:
RW_DROP	parse.cc	210;"	d	file:
RW_DROP	y.tab.h	/^     RW_DROP = 259,$/;"	e	enum:yytokentype
RW_DROP	y.tab.h	82;"	d
RW_EXIT	parse.cc	/^     RW_EXIT = 266,$/;"	e	enum:yytokentype	file:
RW_EXIT	parse.cc	217;"	d	file:
RW_EXIT	y.tab.h	/^     RW_EXIT = 266,$/;"	e	enum:yytokentype
RW_EXIT	y.tab.h	89;"	d
RW_FROM	parse.cc	/^     RW_FROM = 268,$/;"	e	enum:yytokentype	file:
RW_FROM	parse.cc	219;"	d	file:
RW_FROM	y.tab.h	/^     RW_FROM = 268,$/;"	e	enum:yytokentype
RW_FROM	y.tab.h	91;"	d
RW_HELP	parse.cc	/^     RW_HELP = 264,$/;"	e	enum:yytokentype	file:
RW_HELP	parse.cc	215;"	d	file:
RW_HELP	y.tab.h	/^     RW_HELP = 264,$/;"	e	enum:yytokentype
RW_HELP	y.tab.h	87;"	d
RW_INDEX	parse.cc	/^     RW_INDEX = 261,$/;"	e	enum:yytokentype	file:
RW_INDEX	parse.cc	212;"	d	file:
RW_INDEX	y.tab.h	/^     RW_INDEX = 261,$/;"	e	enum:yytokentype
RW_INDEX	y.tab.h	84;"	d
RW_INSERT	parse.cc	/^     RW_INSERT = 270,$/;"	e	enum:yytokentype	file:
RW_INSERT	parse.cc	221;"	d	file:
RW_INSERT	y.tab.h	/^     RW_INSERT = 270,$/;"	e	enum:yytokentype
RW_INSERT	y.tab.h	93;"	d
RW_INTO	parse.cc	/^     RW_INTO = 274,$/;"	e	enum:yytokentype	file:
RW_INTO	parse.cc	225;"	d	file:
RW_INTO	y.tab.h	/^     RW_INTO = 274,$/;"	e	enum:yytokentype
RW_INTO	y.tab.h	97;"	d
RW_IO	parse.cc	/^     RW_IO = 285,$/;"	e	enum:yytokentype	file:
RW_IO	parse.cc	236;"	d	file:
RW_IO	y.tab.h	/^     RW_IO = 285,$/;"	e	enum:yytokentype
RW_IO	y.tab.h	108;"	d
RW_LOAD	parse.cc	/^     RW_LOAD = 262,$/;"	e	enum:yytokentype	file:
RW_LOAD	parse.cc	213;"	d	file:
RW_LOAD	y.tab.h	/^     RW_LOAD = 262,$/;"	e	enum:yytokentype
RW_LOAD	y.tab.h	85;"	d
RW_OFF	parse.cc	/^     RW_OFF = 290,$/;"	e	enum:yytokentype	file:
RW_OFF	parse.cc	241;"	d	file:
RW_OFF	y.tab.h	/^     RW_OFF = 290,$/;"	e	enum:yytokentype
RW_OFF	y.tab.h	113;"	d
RW_ON	parse.cc	/^     RW_ON = 289,$/;"	e	enum:yytokentype	file:
RW_ON	parse.cc	240;"	d	file:
RW_ON	y.tab.h	/^     RW_ON = 289,$/;"	e	enum:yytokentype
RW_ON	y.tab.h	112;"	d
RW_PRINT	parse.cc	/^     RW_PRINT = 265,$/;"	e	enum:yytokentype	file:
RW_PRINT	parse.cc	216;"	d	file:
RW_PRINT	y.tab.h	/^     RW_PRINT = 265,$/;"	e	enum:yytokentype
RW_PRINT	y.tab.h	88;"	d
RW_QUERY_PLAN	parse.cc	/^     RW_QUERY_PLAN = 288,$/;"	e	enum:yytokentype	file:
RW_QUERY_PLAN	parse.cc	239;"	d	file:
RW_QUERY_PLAN	y.tab.h	/^     RW_QUERY_PLAN = 288,$/;"	e	enum:yytokentype
RW_QUERY_PLAN	y.tab.h	111;"	d
RW_RESET	parse.cc	/^     RW_RESET = 284,$/;"	e	enum:yytokentype	file:
RW_RESET	parse.cc	235;"	d	file:
RW_RESET	y.tab.h	/^     RW_RESET = 284,$/;"	e	enum:yytokentype
RW_RESET	y.tab.h	107;"	d
RW_RESIZE	parse.cc	/^     RW_RESIZE = 287,$/;"	e	enum:yytokentype	file:
RW_RESIZE	parse.cc	238;"	d	file:
RW_RESIZE	y.tab.h	/^     RW_RESIZE = 287,$/;"	e	enum:yytokentype
RW_RESIZE	y.tab.h	110;"	d
RW_SELECT	parse.cc	/^     RW_SELECT = 267,$/;"	e	enum:yytokentype	file:
RW_SELECT	parse.cc	218;"	d	file:
RW_SELECT	y.tab.h	/^     RW_SELECT = 267,$/;"	e	enum:yytokentype
RW_SELECT	y.tab.h	90;"	d
RW_SET	parse.cc	/^     RW_SET = 263,$/;"	e	enum:yytokentype	file:
RW_SET	parse.cc	214;"	d	file:
RW_SET	y.tab.h	/^     RW_SET = 263,$/;"	e	enum:yytokentype
RW_SET	y.tab.h	86;"	d
RW_TABLE	parse.cc	/^     RW_TABLE = 260,$/;"	e	enum:yytokentype	file:
RW_TABLE	parse.cc	211;"	d	file:
RW_TABLE	y.tab.h	/^     RW_TABLE = 260,$/;"	e	enum:yytokentype
RW_TABLE	y.tab.h	83;"	d
RW_UPDATE	parse.cc	/^     RW_UPDATE = 272,$/;"	e	enum:yytokentype	file:
RW_UPDATE	parse.cc	223;"	d	file:
RW_UPDATE	y.tab.h	/^     RW_UPDATE = 272,$/;"	e	enum:yytokentype
RW_UPDATE	y.tab.h	95;"	d
RW_VALUES	parse.cc	/^     RW_VALUES = 275,$/;"	e	enum:yytokentype	file:
RW_VALUES	parse.cc	226;"	d	file:
RW_VALUES	y.tab.h	/^     RW_VALUES = 275,$/;"	e	enum:yytokentype
RW_VALUES	y.tab.h	98;"	d
RW_WHERE	parse.cc	/^     RW_WHERE = 269,$/;"	e	enum:yytokentype	file:
RW_WHERE	parse.cc	220;"	d	file:
RW_WHERE	y.tab.h	/^     RW_WHERE = 269,$/;"	e	enum:yytokentype
RW_WHERE	y.tab.h	92;"	d
ReadPage	pf_buffermgr.cc	/^RC PF_BufferMgr::ReadPage(int fd, PageNum pageNum, char *dest)$/;"	f	class:PF_BufferMgr
RecalcCondToRel	ql_manager.cc	/^RC QL_Manager::RecalcCondToRel(QO_Rel* qorels){$/;"	f	class:QL_Manager
ReconstructRec	ql_nodeproj.cc	/^RC QL_NodeProj::ReconstructRec(char *data){$/;"	f	class:QL_NodeProj
Register	statistics.cc	/^RC StatisticsMgr::Register (const char *psKey, const Stat_Operation op,$/;"	f	class:StatisticsMgr
RelAttr	parser.h	/^struct RelAttr{$/;"	s
RelCatEntry	sm.h	/^typedef struct RelCatEntry{$/;"	s
RelCatEntry	sm.h	/^} RelCatEntry;$/;"	t	typeref:struct:RelCatEntry
RemoveRelFromBitmap	qo_manager.cc	/^RC QO_Manager::RemoveRelFromBitmap(int relNum, int &bitmap){$/;"	f	class:QO_Manager
Reset	ql_manager.cc	/^RC QL_Manager::Reset(){$/;"	f	class:QL_Manager
Reset	statistics.cc	/^RC StatisticsMgr::Reset(const char *psKey)$/;"	f	class:StatisticsMgr
Reset	statistics.cc	/^void StatisticsMgr::Reset()$/;"	f	class:StatisticsMgr
ResetBit	rm_filehandle.cc	/^RC RM_FileHandle::ResetBit(char *bitmap, int size, int bitnum){$/;"	f	class:RM_FileHandle
ResetBitmap	rm_filehandle.cc	/^RC RM_FileHandle::ResetBitmap(char *bitmap, int size){$/;"	f	class:RM_FileHandle
ResetPageStats	sm_manager.cc	/^RC SM_Manager::ResetPageStats(){$/;"	f	class:SM_Manager
ResizeBuffer	pf_buffermgr.cc	/^RC PF_BufferMgr::ResizeBuffer(int iNewSize)$/;"	f	class:PF_BufferMgr
ResizeBuffer	pf_manager.cc	/^RC PF_Manager::ResizeBuffer(int iNewSize)$/;"	f	class:PF_Manager
RetrieveNextRec	ql_noderel.cc	/^RC QL_NodeRel::RetrieveNextRec(RM_Record &rec, char *&recData){$/;"	f	class:QL_NodeRel
RunDelete	ql_manager.cc	/^RC QL_Manager::RunDelete(QL_Node *topNode){$/;"	f	class:QL_Manager
RunSelect	ql_manager.cc	/^RC QL_Manager::RunSelect(QL_Node *topNode){$/;"	f	class:QL_Manager
RunUpdate	ql_manager.cc	/^RC QL_Manager::RunUpdate(QL_Node *topNode, const RelAttr &updAttr,$/;"	f	class:QL_Manager
SET	parser_internal.h	/^      } SET;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon10
SM_AttrIterator	sm.h	/^class SM_AttrIterator{$/;"	c
SM_AttrIterator	sm_attriterator.cc	/^SM_AttrIterator::SM_AttrIterator(){$/;"	f	class:SM_AttrIterator
SM_BADATTR	sm.h	183;"	d
SM_BADLOADFILE	sm.h	187;"	d
SM_BADREL	sm.h	182;"	d
SM_BADRELNAME	sm.h	181;"	d
SM_BADSET	sm.h	188;"	d
SM_CANNOTCLOSE	sm.h	180;"	d
SM_ERROR	sm.h	192;"	d
SM_ErrorMsg	sm_error.cc	/^static char *SM_ErrorMsg[] = {$/;"	v	file:
SM_H	sm.h	7;"	d
SM_INDEXEDALREADY	sm.h	185;"	d
SM_INVALIDATTR	sm.h	184;"	d
SM_INVALIDDB	sm.h	191;"	d
SM_LASTERROR	sm.h	193;"	d
SM_LASTWARN	sm.h	189;"	d
SM_Manager	sm.h	/^class SM_Manager {$/;"	c
SM_Manager	sm_manager.cc	/^SM_Manager::SM_Manager(IX_Manager &ixm, RM_Manager &rmm) : ixm(ixm), rmm(rmm){$/;"	f	class:SM_Manager
SM_Manager	sm_stub.cc	/^SM_Manager::SM_Manager(IX_Manager &ixm, RM_Manager &rmm) : ixm(ixm), rmm(rmm){$/;"	f	class:SM_Manager
SM_NOINDEX	sm.h	186;"	d
SM_OBJECTS	Makefile	/^SM_OBJECTS     = $(addprefix $(BUILD_DIR), $(SM_SOURCES:.cc=.o))$/;"	m
SM_PrintError	sm_error.cc	/^void SM_PrintError(RC rc)$/;"	f
SM_SOURCES	Makefile	/^SM_SOURCES     = sm_manager.cc printer.cc sm_error.cc sm_attriterator.cc$/;"	m
SM_WarnMsg	sm_error.cc	/^static char *SM_WarnMsg[] = {$/;"	v	file:
START_IX_ERR	redbase.h	35;"	d
START_IX_WARN	redbase.h	46;"	d
START_PF_ERR	redbase.h	31;"	d
START_PF_WARN	redbase.h	42;"	d
START_QL_ERR	redbase.h	39;"	d
START_QL_WARN	redbase.h	50;"	d
START_RM_ERR	redbase.h	33;"	d
START_RM_WARN	redbase.h	44;"	d
START_SM_ERR	redbase.h	37;"	d
START_SM_WARN	redbase.h	48;"	d
STATISTICS_H	statistics.h	21;"	d
STATS_OPTION	Makefile	/^STATS_OPTION   = -DPF_STATS$/;"	m
STAT_ADDONE	statistics.h	/^    STAT_ADDONE,$/;"	e	enum:Stat_Operation
STAT_ADDVALUE	statistics.h	/^    STAT_ADDVALUE,$/;"	e	enum:Stat_Operation
STAT_BASE	statistics.h	/^const int STAT_BASE = 9000;$/;"	v
STAT_DIVVALUE	statistics.h	/^    STAT_DIVVALUE,$/;"	e	enum:Stat_Operation
STAT_INVALID_ARGS	statistics.h	/^const int STAT_INVALID_ARGS = STAT_BASE+1;  \/\/ Bad Args in call to method$/;"	v
STAT_MULTVALUE	statistics.h	/^    STAT_MULTVALUE,$/;"	e	enum:Stat_Operation
STAT_SETVALUE	statistics.h	/^    STAT_SETVALUE,$/;"	e	enum:Stat_Operation
STAT_SUBVALUE	statistics.h	/^    STAT_SUBVALUE$/;"	e	enum:Stat_Operation
STAT_UNKNOWN_KEY	statistics.h	/^const int STAT_UNKNOWN_KEY  = STAT_BASE+2;  \/\/ No such Key being tracked$/;"	v
STRING	redbase.h	/^    STRING$/;"	e	enum:AttrType
Select	ql_manager.cc	/^RC QL_Manager::Select(int nSelAttrs, const RelAttr selAttrs[],$/;"	f	class:QL_Manager
Select	ql_manager_stub.cc	/^RC QL_Manager::Select(int nSelAttrs, const RelAttr selAttrs[],$/;"	f	class:QL_Manager
Set	sm_manager.cc	/^RC SM_Manager::Set(const char *paramName, const char *value)$/;"	f	class:SM_Manager
Set	sm_stub.cc	/^RC SM_Manager::Set(const char *paramName, const char *value)$/;"	f	class:SM_Manager
SetBit	rm_filehandle.cc	/^RC RM_FileHandle::SetBit(char *bitmap, int size, int bitnum){$/;"	f	class:RM_FileHandle
SetNull	linkedlist.h	/^inline void LinkList<T>::SetNull()$/;"	f	class:LinkList
SetRecord	rm_record.cc	/^RC RM_Record::SetRecord(RID rec_rid, char *recData, int rec_size){$/;"	f	class:RM_Record
SetUpAttrCatAttributes	sm_manager.cc	/^RC SM_Manager::SetUpAttrCatAttributes(DataAttrInfo *attributes){$/;"	f	class:SM_Manager
SetUpAttrCatAttributes	sm_stub.cc	/^RC SM_Manager::SetUpAttrCatAttributes(DataAttrInfo *attributes){$/;"	f	class:SM_Manager
SetUpFH	rm_manager.cc	/^RC RM_Manager::SetUpFH(RM_FileHandle& fileHandle, PF_FileHandle &fh, struct RM_FileHeader* header){$/;"	f	class:RM_Manager
SetUpFirstNode	ql_manager.cc	/^RC QL_Manager::SetUpFirstNode(QL_Node *&topNode){$/;"	f	class:QL_Manager
SetUpFirstNodeWithQO	ql_manager.cc	/^RC QL_Manager::SetUpFirstNodeWithQO(QL_Node *&topNode, QO_Rel* qorels){$/;"	f	class:QL_Manager
SetUpNode	ql_nodejoin.cc	/^RC QL_NodeJoin::SetUpNode(int numConds){$/;"	f	class:QL_NodeJoin
SetUpNode	ql_nodeproj.cc	/^RC QL_NodeProj::SetUpNode(int numAttrToKeep){$/;"	f	class:QL_NodeProj
SetUpNode	ql_noderel.cc	/^RC QL_NodeRel::SetUpNode(int *attrs, int attrlistSize){$/;"	f	class:QL_NodeRel
SetUpNode	ql_nodesel.cc	/^RC QL_NodeSel::SetUpNode(int numConds){$/;"	f	class:QL_NodeSel
SetUpNodes	ql_manager.cc	/^RC QL_Manager::SetUpNodes(QL_Node *&topNode, int nSelAttrs, const RelAttr selAttrs[]){$/;"	f	class:QL_Manager
SetUpNodesWithQO	ql_manager.cc	/^RC QL_Manager::SetUpNodesWithQO(QL_Node *&topNode, QO_Rel* qorels, int nSelAttrs, const RelAttr selAttrs[]){$/;"	f	class:QL_Manager
SetUpOneRelation	ql_manager.cc	/^RC QL_Manager::SetUpOneRelation(const char *relName){$/;"	f	class:QL_Manager
SetUpPrint	sm_manager.cc	/^RC SM_Manager::SetUpPrint(RelCatEntry* rEntry, DataAttrInfo *attributes){$/;"	f	class:SM_Manager
SetUpPrint	sm_stub.cc	/^RC SM_Manager::SetUpPrint(RelCatEntry* rEntry, DataAttrInfo *attributes){$/;"	f	class:SM_Manager
SetUpPrinter	ql_manager.cc	/^RC QL_Manager::SetUpPrinter(QL_Node *topNode, DataAttrInfo *attributes){$/;"	f	class:QL_Manager
SetUpPrinterInsert	ql_manager.cc	/^RC QL_Manager::SetUpPrinterInsert(DataAttrInfo *attributes){$/;"	f	class:QL_Manager
SetUpRel	node_rel.cc	/^RC Node_Rel::SetUpRel(int *attrs, int attrlistSize, int numConds){$/;"	f	class:Node_Rel
SetUpRelCatAttributes	sm_manager.cc	/^RC SM_Manager::SetUpRelCatAttributes(DataAttrInfo *attributes){$/;"	f	class:SM_Manager
SetUpRelCatAttributes	sm_stub.cc	/^RC SM_Manager::SetUpRelCatAttributes(DataAttrInfo *attributes){$/;"	f	class:SM_Manager
SetUpRun	ql_manager.cc	/^RC QL_Manager::SetUpRun(Attr* attributes, RM_FileHandle &relFH){$/;"	f	class:QL_Manager
SlotNum	rm_rid.h	/^typedef int SlotNum;$/;"	t
Spaces	printer.cc	/^void Spaces(int maxLength, int printedSoFar)$/;"	f
Stat_Operation	statistics.h	/^enum Stat_Operation {$/;"	g
Statistic	statistics.cc	/^Statistic::Statistic()$/;"	f	class:Statistic
Statistic	statistics.cc	/^Statistic::Statistic(const Statistic &stat)$/;"	f	class:Statistic
Statistic	statistics.cc	/^Statistic::Statistic(const char *psKey_)$/;"	f	class:Statistic
Statistic	statistics.h	/^class Statistic {$/;"	c
StatisticsMgr	statistics.h	/^    StatisticsMgr() {};$/;"	f	class:StatisticsMgr
StatisticsMgr	statistics.h	/^class StatisticsMgr {$/;"	c
TEMPL_LINKED_LIST_H	linkedlist.h	17;"	d
TESTER_OBJECTS	Makefile	/^TESTER_OBJECTS = $(addprefix $(BUILD_DIR), $(TESTER_SOURCES:.cc=.o))$/;"	m
TESTER_SOURCES	Makefile	/^TESTER_SOURCES = rm_testkpg.cc parser_test.cc ix_testkpg_2.cc ix_testpark.cc ix_testjl.cc ix_tester.cc ix_test_simple.cc ix_test.cc rm_testrecsizes.cc rm_testshnFIXED.cc rm_testyh_random.cc rm_test.cc rm_testgmf.cc rm_testkpg.cc #rm_testjl.cc #rm_test.cc #ix_test.cc parser_test.cc$/;"	m
TESTS	Makefile	/^TESTS          = $(TESTER_SOURCES:.cc=)$/;"	m
TRUE	redbase.h	93;"	d
TRUE	statistics.h	29;"	d
T_EOF	parse.cc	/^     T_EOF = 282,$/;"	e	enum:yytokentype	file:
T_EOF	parse.cc	233;"	d	file:
T_EOF	y.tab.h	/^     T_EOF = 282,$/;"	e	enum:yytokentype
T_EOF	y.tab.h	105;"	d
T_EQ	parse.cc	/^     T_EQ = 276,$/;"	e	enum:yytokentype	file:
T_EQ	parse.cc	227;"	d	file:
T_EQ	y.tab.h	/^     T_EQ = 276,$/;"	e	enum:yytokentype
T_EQ	y.tab.h	99;"	d
T_GE	parse.cc	/^     T_GE = 280,$/;"	e	enum:yytokentype	file:
T_GE	parse.cc	231;"	d	file:
T_GE	y.tab.h	/^     T_GE = 280,$/;"	e	enum:yytokentype
T_GE	y.tab.h	103;"	d
T_GT	parse.cc	/^     T_GT = 279,$/;"	e	enum:yytokentype	file:
T_GT	parse.cc	230;"	d	file:
T_GT	y.tab.h	/^     T_GT = 279,$/;"	e	enum:yytokentype
T_GT	y.tab.h	102;"	d
T_INT	parse.cc	/^     T_INT = 291,$/;"	e	enum:yytokentype	file:
T_INT	parse.cc	242;"	d	file:
T_INT	y.tab.h	/^     T_INT = 291,$/;"	e	enum:yytokentype
T_INT	y.tab.h	114;"	d
T_LE	parse.cc	/^     T_LE = 278,$/;"	e	enum:yytokentype	file:
T_LE	parse.cc	229;"	d	file:
T_LE	y.tab.h	/^     T_LE = 278,$/;"	e	enum:yytokentype
T_LE	y.tab.h	101;"	d
T_LT	parse.cc	/^     T_LT = 277,$/;"	e	enum:yytokentype	file:
T_LT	parse.cc	228;"	d	file:
T_LT	y.tab.h	/^     T_LT = 277,$/;"	e	enum:yytokentype
T_LT	y.tab.h	100;"	d
T_NE	parse.cc	/^     T_NE = 281,$/;"	e	enum:yytokentype	file:
T_NE	parse.cc	232;"	d	file:
T_NE	y.tab.h	/^     T_NE = 281,$/;"	e	enum:yytokentype
T_NE	y.tab.h	104;"	d
T_QSTRING	parse.cc	/^     T_QSTRING = 294,$/;"	e	enum:yytokentype	file:
T_QSTRING	parse.cc	245;"	d	file:
T_QSTRING	y.tab.h	/^     T_QSTRING = 294,$/;"	e	enum:yytokentype
T_QSTRING	y.tab.h	117;"	d
T_REAL	parse.cc	/^     T_REAL = 292,$/;"	e	enum:yytokentype	file:
T_REAL	parse.cc	243;"	d	file:
T_REAL	y.tab.h	/^     T_REAL = 292,$/;"	e	enum:yytokentype
T_REAL	y.tab.h	115;"	d
T_SHELL_CMD	parse.cc	/^     T_SHELL_CMD = 295$/;"	e	enum:yytokentype	file:
T_SHELL_CMD	parse.cc	246;"	d	file:
T_SHELL_CMD	y.tab.h	/^     T_SHELL_CMD = 295$/;"	e	enum:yytokentype
T_SHELL_CMD	y.tab.h	118;"	d
T_STRING	parse.cc	/^     T_STRING = 293,$/;"	e	enum:yytokentype	file:
T_STRING	parse.cc	244;"	d	file:
T_STRING	y.tab.h	/^     T_STRING = 293,$/;"	e	enum:yytokentype
T_STRING	y.tab.h	116;"	d
UINT16_MAX	scan.cc	80;"	d	file:
UINT32_MAX	scan.cc	83;"	d	file:
UINT8_MAX	scan.cc	77;"	d	file:
UPDATE	parser_internal.h	/^      } UPDATE;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon16
UTILS	Makefile	/^UTILS          = $(UTILS_SOURCES:.cc=)$/;"	m
UTILS_OBJECTS	Makefile	/^UTILS_OBJECTS  = $(addprefix $(BUILD_DIR), $(UTILS_SOURCES:.cc=.o))$/;"	m
UTILS_SOURCES	Makefile	/^UTILS_SOURCES  = dbcreate.cc dbdestroy.cc redbase.cc$/;"	m
Unlink	pf_buffermgr.cc	/^RC PF_BufferMgr::Unlink(int slot)$/;"	f	class:PF_BufferMgr
UnpinPage	pf_buffermgr.cc	/^RC PF_BufferMgr::UnpinPage(int fd, PageNum pageNum)$/;"	f	class:PF_BufferMgr
UnpinPage	pf_filehandle.cc	/^RC PF_FileHandle::UnpinPage(PageNum pageNum) const$/;"	f	class:PF_FileHandle
Update	ql_manager.cc	/^RC QL_Manager::Update(const char *relName,$/;"	f	class:QL_Manager
Update	ql_manager_stub.cc	/^RC QL_Manager::Update(const char *relName,$/;"	f	class:QL_Manager
UpdateRec	rm_filehandle.cc	/^RC RM_FileHandle::UpdateRec (const RM_Record &rec) {$/;"	f	class:RM_FileHandle
UseCondition	qo_manager.cc	/^bool QO_Manager::UseCondition(int relsJoined, int condIndex, int relIdx){$/;"	f	class:QO_Manager
UseIndex	ql_nodejoin.cc	/^RC QL_NodeJoin::UseIndex(int attrNum, int indexNumber, void *data){$/;"	f	class:QL_NodeJoin
UseIndex	ql_nodeproj.cc	/^RC QL_NodeProj::UseIndex(int attrNum, int indexNumber, void *data){$/;"	f	class:QL_NodeProj
UseIndex	ql_noderel.cc	/^RC QL_NodeRel::UseIndex(int attrNum, int indexNumber, void *data){$/;"	f	class:QL_NodeRel
UseIndex	ql_nodesel.cc	/^RC QL_NodeSel::UseIndex(int attrNum, int indexNumber, void *data){$/;"	f	class:QL_NodeSel
UseIndexJoin	ql_nodejoin.cc	/^RC QL_NodeJoin::UseIndexJoin(int indexAttr, int subNodeAttr, int indexNumber){$/;"	f	class:QL_NodeJoin
VALUE	parser_internal.h	/^      } VALUE;$/;"	m	union:node::__anon4	typeref:struct:node::__anon4::__anon21
Value	parser.h	/^struct Value{$/;"	s
WriteLog	pf_buffermgr.cc	/^void WriteLog(const char *psMessage)$/;"	f
WritePage	pf_buffermgr.cc	/^RC PF_BufferMgr::WritePage(int fd, PageNum pageNum, char *source)$/;"	f	class:PF_BufferMgr
YACC	Makefile	/^YACC           = bison -dy$/;"	m
YYABORT	parse.cc	798;"	d	file:
YYACCEPT	parse.cc	797;"	d	file:
YYBACKUP	parse.cc	819;"	d	file:
YYBISON	parse.cc	44;"	d	file:
YYBISON_VERSION	parse.cc	47;"	d	file:
YYCASE_	parse.cc	1251;"	d	file:
YYCASE_	parse.cc	1261;"	d	file:
YYCOPY	parse.cc	480;"	d	file:
YYCOPY	parse.cc	483;"	d	file:
YYCOPY_NEEDED	parse.cc	455;"	d	file:
YYDEBUG	parse.cc	145;"	d	file:
YYDPRINTF	parse.cc	1038;"	d	file:
YYDPRINTF	parse.cc	889;"	d	file:
YYEMPTY	parse.cc	794;"	d	file:
YYEOF	parse.cc	795;"	d	file:
YYERRCODE	parse.cc	837;"	d	file:
YYERROR	parse.cc	799;"	d	file:
YYERROR_VERBOSE	parse.cc	150;"	d	file:
YYERROR_VERBOSE	parse.cc	151;"	d	file:
YYERROR_VERBOSE	parse.cc	153;"	d	file:
YYFAIL	parse.cc	809;"	d	file:
YYFINAL	parse.cc	496;"	d	file:
YYFPRINTF	parse.cc	886;"	d	file:
YYFREE	parse.cc	425;"	d	file:
YYID	parse.cc	/^YYID (int yyi)$/;"	f	file:
YYID	parse.cc	349;"	d	file:
YYINITDEPTH	parse.cc	1047;"	d	file:
YYLAST	parse.cc	498;"	d	file:
YYLEX	parse.cc	876;"	d	file:
YYLEX	parse.cc	878;"	d	file:
YYLLOC_DEFAULT	parse.cc	846;"	d	file:
YYLSP_NEEDED	parse.cc	62;"	d	file:
YYMALLOC	parse.cc	418;"	d	file:
YYMAXDEPTH	parse.cc	1058;"	d	file:
YYMAXUTOK	parse.cc	511;"	d	file:
YYNNTS	parse.cc	503;"	d	file:
YYNRULES	parse.cc	505;"	d	file:
YYNSTATES	parse.cc	507;"	d	file:
YYNTOKENS	parse.cc	501;"	d	file:
YYPACT_NINF	parse.cc	702;"	d	file:
YYPOPSTACK	parse.cc	1422;"	d	file:
YYPULL	parse.cc	59;"	d	file:
YYPURE	parse.cc	53;"	d	file:
YYPUSH	parse.cc	56;"	d	file:
YYRECOVERING	parse.cc	817;"	d	file:
YYRHSLOC	parse.cc	844;"	d	file:
YYSIZE_MAXIMUM	parse.cc	326;"	d	file:
YYSIZE_T	parse.cc	314;"	d	file:
YYSIZE_T	parse.cc	316;"	d	file:
YYSIZE_T	parse.cc	320;"	d	file:
YYSIZE_T	parse.cc	322;"	d	file:
YYSKELETON_NAME	parse.cc	50;"	d	file:
YYSTACK_ALLOC	parse.cc	372;"	d	file:
YYSTACK_ALLOC	parse.cc	376;"	d	file:
YYSTACK_ALLOC	parse.cc	381;"	d	file:
YYSTACK_ALLOC	parse.cc	404;"	d	file:
YYSTACK_ALLOC_MAXIMUM	parse.cc	401;"	d	file:
YYSTACK_ALLOC_MAXIMUM	parse.cc	407;"	d	file:
YYSTACK_BYTES	parse.cc	451;"	d	file:
YYSTACK_FREE	parse.cc	395;"	d	file:
YYSTACK_FREE	parse.cc	405;"	d	file:
YYSTACK_GAP_MAXIMUM	parse.cc	447;"	d	file:
YYSTACK_RELOCATE	parse.cc	462;"	d	file:
YYSTATE	scan.cc	132;"	d	file:
YYSTYPE	parse.cc	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	parse.cc	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	y.tab.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	y.tab.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE_IS_DECLARED	parse.cc	271;"	d	file:
YYSTYPE_IS_DECLARED	y.tab.h	143;"	d
YYSTYPE_IS_TRIVIAL	parse.cc	269;"	d	file:
YYSTYPE_IS_TRIVIAL	y.tab.h	141;"	d
YYTABLES_NAME	scan.cc	1906;"	d	file:
YYTABLE_NINF	parse.cc	733;"	d	file:
YYTERROR	parse.cc	836;"	d	file:
YYTOKENTYPE	parse.cc	164;"	d	file:
YYTOKENTYPE	y.tab.h	36;"	d
YYTOKEN_TABLE	parse.cc	158;"	d	file:
YYTRANSLATE	parse.cc	513;"	d	file:
YYUNDEFTOK	parse.cc	510;"	d	file:
YYUSE	parse.cc	342;"	d	file:
YYUSE	parse.cc	344;"	d	file:
YY_	parse.cc	332;"	d	file:
YY_	parse.cc	336;"	d	file:
YY_AT_BOL	scan.cc	339;"	d	file:
YY_BREAK	scan.cc	679;"	d	file:
YY_BUFFER_EOF_PENDING	scan.cc	255;"	d	file:
YY_BUFFER_NEW	scan.cc	243;"	d	file:
YY_BUFFER_NORMAL	scan.cc	244;"	d	file:
YY_BUFFER_STATE	scan.cc	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	scan.cc	149;"	d	file:
YY_BUF_SIZE	scan.cc	151;"	d	file:
YY_CHAR	scan.cc	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	scan.cc	271;"	d	file:
YY_CURRENT_BUFFER_LVALUE	scan.cc	278;"	d	file:
YY_DECL	scan.cc	667;"	d	file:
YY_DECL_IS_OURS	scan.cc	663;"	d	file:
YY_DO_BEFORE_ACTION	scan.cc	364;"	d	file:
YY_END_OF_BUFFER	scan.cc	372;"	d	file:
YY_END_OF_BUFFER_CHAR	scan.cc	140;"	d	file:
YY_EXIT_FAILURE	scan.cc	1704;"	d	file:
YY_EXTRA_TYPE	scan.cc	519;"	d	file:
YY_FATAL_ERROR	scan.cc	654;"	d	file:
YY_FLEX_MAJOR_VERSION	scan.cc	9;"	d	file:
YY_FLEX_MINOR_VERSION	scan.cc	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	scan.cc	11;"	d	file:
YY_FLUSH_BUFFER	scan.cc	307;"	d	file:
YY_INPUT	scan.cc	607;"	d	file:
YY_INT_ALIGNED	scan.cc	4;"	d	file:
YY_LESS_LINENO	scan.cc	172;"	d	file:
YY_LOCATION_PRINT	parse.cc	869;"	d	file:
YY_MORE_ADJ	scan.cc	480;"	d	file:
YY_NEW_FILE	scan.cc	138;"	d	file:
YY_NULL	scan.cc	112;"	d	file:
YY_NUM_RULES	scan.cc	371;"	d	file:
YY_READ_BUF_SIZE	scan.cc	589;"	d	file:
YY_READ_BUF_SIZE	scan.cc	591;"	d	file:
YY_REDUCE_PRINT	parse.cc	1028;"	d	file:
YY_REDUCE_PRINT	parse.cc	1041;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	scan.cc	481;"	d	file:
YY_RULE_SETUP	scan.cc	682;"	d	file:
YY_SC_TO_UI	scan.cc	119;"	d	file:
YY_SKIP_YYWRAP	redbase.h	20;"	d
YY_STACK_PRINT	parse.cc	1040;"	d	file:
YY_STACK_PRINT	parse.cc	990;"	d	file:
YY_START	scan.cc	131;"	d	file:
YY_START_STACK_INCR	scan.cc	649;"	d	file:
YY_STATE_BUF_SIZE	scan.cc	157;"	d	file:
YY_STATE_EOF	scan.cc	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	scan.cc	196;"	d	file:
YY_SYMBOL_PRINT	parse.cc	1039;"	d	file:
YY_SYMBOL_PRINT	parse.cc	895;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	scan.cc	160;"	d	file:
YY_TYPEDEF_YY_SIZE_T	scan.cc	191;"	d	file:
YY_USER_ACTION	scan.cc	674;"	d	file:
YY_USE_CONST	scan.cc	100;"	d	file:
YY_USE_CONST	scan.cc	93;"	d	file:
_HELPER	printer.h	9;"	d
__STDC_LIMIT_MACROS	scan.cc	39;"	d	file:
alloca	parse.cc	379;"	d	file:
attrCount	printer.h	/^    int attrCount;$/;"	m	class:Printer
attrCount	sm.h	/^  int attrCount;$/;"	m	struct:RelCatEntry
attrEntries	ql.h	/^  AttrCatEntry *attrEntries;$/;"	m	class:QL_Manager
attrLength	parser.h	/^    int      attrLength;  \/* length of attribute  *\/$/;"	m	struct:AttrInfo
attrLength	printer.h	/^    int      attrLength;            \/\/ Length of attribute$/;"	m	struct:DataAttrInfo
attrLength	rm.h	/^    int attrLength;$/;"	m	class:RM_FileScan
attrLength	sm.h	/^  int attrLength;$/;"	m	struct:AttrCatEntry
attrName	parser.h	/^    char     *attrName;   \/* attribute name       *\/$/;"	m	struct:AttrInfo
attrName	parser.h	/^    char     *attrName;   \/\/ Attribute name$/;"	m	struct:RelAttr
attrName	parser_internal.h	/^    char *attrName;     \/* attribute name       *\/$/;"	m	struct:__anon1
attrName	parser_internal.h	/^    char *attrName;     \/* attribute name       *\/$/;"	m	struct:__anon2
attrName	printer.h	/^    char     attrName[MAXNAME+1];   \/\/ Attribute name$/;"	m	struct:DataAttrInfo
attrName	sm.h	/^  char attrName[MAXNAME +1];$/;"	m	struct:AttrCatEntry
attrNum	sm.h	/^  int attrNum;$/;"	m	struct:AttrCatEntry
attrOffset	rm.h	/^    int attrOffset;$/;"	m	class:RM_FileScan
attrStat	qo.h	/^typedef struct attrStat{$/;"	s
attrStat	qo.h	/^} attrStat;$/;"	t	typeref:struct:attrStat
attrToRel	ql.h	/^  std::map<std::string, std::set<std::string> > attrToRel;$/;"	m	class:QL_Manager
attrType	parser.h	/^    AttrType attrType;    \/* type of attribute    *\/$/;"	m	struct:AttrInfo
attrType	printer.h	/^    AttrType attrType;              \/\/ Type of attribute$/;"	m	struct:DataAttrInfo
attrType	rm.h	/^    AttrType attrType;$/;"	m	class:RM_FileScan
attrType	sm.h	/^  AttrType attrType;$/;"	m	struct:AttrCatEntry
attrcatFH	sm.h	/^  RM_FileHandle attrcatFH;$/;"	m	class:SM_Manager
attributes	printer.h	/^    DataAttrInfo *attributes;$/;"	m	class:Printer
attrlist	parser_internal.h	/^         struct node *attrlist;$/;"	m	struct:node::__anon4::__anon5	typeref:struct:node::__anon4::__anon5::node
attrname	parser_internal.h	/^         char *attrname;$/;"	m	struct:node::__anon4::__anon17
attrname	parser_internal.h	/^         char *attrname;$/;"	m	struct:node::__anon4::__anon20
attrname	parser_internal.h	/^         char *attrname;$/;"	m	struct:node::__anon4::__anon6
attrname	parser_internal.h	/^         char *attrname;$/;"	m	struct:node::__anon4::__anon7
attrs	qo.h	/^  AttrCatEntry *attrs; \/\/ pointer to array of AttrCatEntries for this selection$/;"	m	class:QO_Manager
attrs	qo.h	/^  std::map<int, attrStat> attrs;  \/\/ map of attribute statistics$/;"	m	struct:costElem
attrsInRec	ql_node.h	/^  int *attrsInRec; \/\/ list of indices of the attribute in this node$/;"	m	class:QL_Node
attrsInRecSize	ql_node.h	/^  int attrsInRecSize; \/\/ size of the attribute list$/;"	m	class:QL_Node
attrtype_node	nodes.cc	/^NODE *attrtype_node(char *attrname, char *type)$/;"	f
bDirty	pf_buffermgr.h	/^    int        bDirty;      \/\/ TRUE if page is dirty$/;"	m	struct:PF_BufPageDesc
bExit	parse.cc	/^int bExit;                 \/\/ when to return from RBparse$/;"	v
bFileOpen	pf.h	/^   int bFileOpen;                                 \/\/ file open flag$/;"	m	class:PF_FileHandle
bHdrChanged	pf.h	/^   int bHdrChanged;                               \/\/ dirty flag for file hdr$/;"	m	class:PF_FileHandle
bQueryPlans	parse.cc	/^int bQueryPlans;           \/\/ When to print the query plans$/;"	v
bRhsIsAttr	parser.h	/^    int      bRhsIsAttr; \/* TRUE if the rhs is an attribute,    *\/$/;"	m	struct:Condition
bitmapOffset	rm.h	/^  int bitmapOffset;         \/\/ location in bytes of where the bitmap starts$/;"	m	struct:RM_FileHeader
bitmapSize	rm.h	/^  int bitmapSize;           \/\/ size of bitmaps in the page headers$/;"	m	struct:RM_FileHeader
bufTable	pf_buffermgr.h	/^    PF_BufPageDesc *bufTable;                     \/\/ info on buffer pages$/;"	m	class:PF_BufferMgr
buffer	ql_node.h	/^  char * buffer;$/;"	m	class:QL_NodeJoin
buffer	ql_node.h	/^  char *buffer;$/;"	m	class:QL_NodeProj
buffer	ql_node.h	/^  char *buffer;$/;"	m	class:QL_NodeSel
calcStats	sm.h	/^  bool calcStats;$/;"	m	class:SM_Manager
charpool	scanhelp.c	/^static char charpool[MAXCHAR];$/;"	v	file:
charptr	scanhelp.c	/^static int charptr = 0;$/;"	v	file:
cleanup_func	nodes.cc	/^static void (*cleanup_func)() = NULL;$/;"	v	file:
comment	scan.cc	507;"	d	file:
compOp	rm.h	/^    CompOp compOp;$/;"	m	class:RM_FileScan
comparator	ql_node.h	/^  bool (*comparator) (void * , void *, AttrType, int); $/;"	m	struct:Cond
comparator	rm.h	/^    bool (*comparator) (void * , void *, AttrType, int);$/;"	m	class:RM_FileScan
compare_float	comparators.h	/^static int compare_float(void *value1, void* value2, int attrLength){$/;"	f
compare_int	comparators.h	/^static int compare_int(void *value1, void* value2, int attrLength){$/;"	f
compare_string	comparators.h	/^static int compare_string(void *value1, void* value2, int attrLength){$/;"	f
condIndex	ql_node.h	/^  int condIndex; \/\/ the # of conditions currently in this node$/;"	m	class:QL_Node
condList	ql_node.h	/^  Cond *condList;$/;"	m	class:QL_Node
conditionToRel	ql.h	/^  std::map<int, int> conditionToRel;$/;"	m	class:QL_Manager
condition_node	nodes.cc	/^NODE *condition_node(NODE *lhsRelattr, CompOp op, NODE *rhsRelattrOrValue)$/;"	f
conditionlist	parser_internal.h	/^         struct node *conditionlist;$/;"	m	struct:node::__anon4::__anon13	typeref:struct:node::__anon4::__anon13::node
conditionlist	parser_internal.h	/^         struct node *conditionlist;$/;"	m	struct:node::__anon4::__anon15	typeref:struct:node::__anon4::__anon15::node
conditionlist	parser_internal.h	/^         struct node *conditionlist;$/;"	m	struct:node::__anon4::__anon16	typeref:struct:node::__anon4::__anon16::node
condptr	ql.h	/^  const Condition *condptr;$/;"	m	class:QL_Manager
conds	qo.h	/^  const Condition *conds;$/;"	m	class:QO_Manager
condsInNode	ql_node.h	/^  int* condsInNode; \/\/ maps the condition from the index in this list, to the $/;"	m	class:QL_Node
cost	qo.h	/^  float cost;       \/\/ cost of joining (S-a) with a to get S$/;"	m	struct:costElem
costElem	qo.h	/^typedef struct costElem{$/;"	s
costElem	qo.h	/^} costElem;$/;"	t	typeref:struct:costElem
create_index_node	nodes.cc	/^NODE *create_index_node(char *relname, char *attrname)$/;"	f
create_table_node	nodes.cc	/^NODE *create_table_node(char *relname, NODE *attrlist)$/;"	f
curr	parser_internal.h	/^         struct node *curr;$/;"	m	struct:node::__anon4::__anon23	typeref:struct:node::__anon4::__anon23::node
currentPH	rm.h	/^    PF_PageHandle currentPH;$/;"	m	class:RM_FileScan
cval	parse.cc	/^    CompOp cval;$/;"	m	union:YYSTYPE	file:
cval	y.tab.h	/^    CompOp cval;$/;"	m	union:YYSTYPE
data	parser.h	/^    void     *data;        \/* value                       *\/$/;"	m	struct:Value
data	ql_node.h	/^  void* data; \/\/ the pointer to the data$/;"	m	struct:Cond
data	rm.h	/^    char * data;    \/\/ pointer to record data. This is stored in the$/;"	m	class:RM_Record
delete_node	nodes.cc	/^NODE *delete_node(char *relname, NODE *conditionlist)$/;"	f
drop_index_node	nodes.cc	/^NODE *drop_index_node(char *relname, char *attrname)$/;"	f
drop_table_node	nodes.cc	/^NODE *drop_table_node(char *relname)$/;"	f
echo_query	interp.cc	/^static void echo_query(NODE *n)$/;"	f	file:
equal	rm_filescan.cc	/^bool equal(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
fd	pf_buffermgr.h	/^    int        fd;          \/\/ OS file descriptor of this page$/;"	m	struct:PF_BufPageDesc
fd	pf_hashtable.h	/^    int          fd;      \/\/ file descriptor$/;"	m	struct:PF_HashEntry
fh	ql_node.h	/^  RM_FileHandle fh;  \/\/ filehandle\/scans for retrieving records from relation$/;"	m	class:QL_NodeRel
fileHandle	rm.h	/^    RM_FileHandle* fileHandle;$/;"	m	class:RM_FileScan
filename	parser_internal.h	/^         char *filename;$/;"	m	struct:node::__anon4::__anon9
first	pf_buffermgr.h	/^    int            first;                         \/\/ MRU page slot$/;"	m	class:PF_BufferMgr
firstFree	pf.h	/^   int firstFree;     \/\/ first free page in the linked list$/;"	m	struct:PF_FileHdr
firstFreePage	rm.h	/^  PageNum firstFreePage;    \/\/ pointer to first free object$/;"	m	struct:RM_FileHeader
firstNodeSize	ql_node.h	/^  int firstNodeSize;$/;"	m	class:QL_NodeJoin
flex_int16_t	scan.cc	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	scan.cc	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	scan.cc	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	scan.cc	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	scan.cc	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	scan.cc	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	scan.cc	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	scan.cc	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	scan.cc	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	scan.cc	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	scan.cc	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	scan.cc	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
free	pf_buffermgr.h	/^    int            free;                          \/\/ head of free list$/;"	m	class:PF_BufferMgr
fs	ql_node.h	/^  RM_FileScan fs;$/;"	m	class:QL_NodeRel
fs	sm.h	/^  RM_FileScan fs;$/;"	m	class:SM_AttrIterator
getRecordSize	rm_filehandle.cc	/^int RM_FileHandle::getRecordSize(){$/;"	f	class:RM_FileHandle
get_id	scanhelp.c	/^static int get_id(char *s)$/;"	f	file:
get_qstring	scanhelp.c	/^static char *get_qstring(char *qstring, int len)$/;"	f	file:
gotFirstTuple	ql_node.h	/^  bool gotFirstTuple;$/;"	m	class:QL_NodeJoin
greater_than	rm_filescan.cc	/^bool greater_than(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
greater_than_or_eq_to	rm_filescan.cc	/^bool greater_than_or_eq_to(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
hasPagePinned	rm.h	/^    bool hasPagePinned;$/;"	m	class:RM_FileScan
hashTable	pf_buffermgr.h	/^    PF_HashTable   hashTable;                     \/\/ Hash table object$/;"	m	class:PF_BufferMgr
hashTable	pf_hashtable.h	/^    PF_HashEntry **hashTable;                     \/\/ Hash table$/;"	m	class:PF_HashTable
hdr	pf.h	/^   PF_FileHdr hdr;                                \/\/ file header$/;"	m	class:PF_FileHandle
header	rm.h	/^    struct RM_FileHeader header;$/;"	m	class:RM_FileHandle	typeref:struct:RM_FileHandle::RM_FileHeader
header_modified	rm.h	/^    bool header_modified;$/;"	m	class:RM_FileHandle
help_node	nodes.cc	/^NODE *help_node(char *relname)$/;"	f
iCount	printer.h	/^    int iCount;$/;"	m	class:Printer
iLastRef	linkedlist.h	/^      int iLastRef;              \/\/ Which element # last referenced$/;"	m	class:LinkList
iLength	linkedlist.h	/^      int iLength;               \/\/ # of items in list$/;"	m	class:LinkList
iValue	statistics.h	/^    int iValue;$/;"	m	class:Statistic
ih	ql_node.h	/^  IX_IndexHandle ih;$/;"	m	class:QL_NodeRel
ih	sm.h	/^  IX_IndexHandle ih;$/;"	m	struct:Attr
indexAttr	ql.h	/^  int indexAttr;$/;"	m	struct:QO_Rel
indexAttr	ql_node.h	/^  int indexAttr; \/\/ index of attribute for the index$/;"	m	class:QL_NodeRel
indexAttr	ql_node.h	/^  int indexAttr;$/;"	m	class:QL_NodeJoin
indexAttr	qo.h	/^  int indexAttr;    \/\/ index attribute. is -1 if no index is used$/;"	m	struct:costElem
indexCond	ql.h	/^  int indexCond;$/;"	m	struct:QO_Rel
indexCond	qo.h	/^  int indexCond;    \/\/ index condition. is -1 if no index is used$/;"	m	struct:costElem
indexCount	sm.h	/^  int indexCount;$/;"	m	struct:RelCatEntry
indexCurrNum	sm.h	/^  int indexCurrNum;$/;"	m	struct:RelCatEntry
indexNo	printer.h	/^    int      indexNo;               \/\/ Index number of attribute$/;"	m	struct:DataAttrInfo
indexNo	ql_node.h	/^  int indexNo;  \/\/ index number to use$/;"	m	class:QL_NodeRel
indexNo	sm.h	/^  int indexNo;$/;"	m	struct:Attr
indexNo	sm.h	/^  int indexNo;$/;"	m	struct:AttrCatEntry
initializedValue	rm.h	/^    bool initializedValue;$/;"	m	class:RM_FileScan
insert_node	nodes.cc	/^NODE *insert_node(char *relname, NODE *valuelist)$/;"	f
interp	interp.cc	/^RC interp(NODE *n)$/;"	f
is	ql_node.h	/^  IX_IndexScan is;$/;"	m	class:QL_NodeRel
isOpen	ql_node.h	/^  bool isOpen; \/\/ Whether the node is open or not$/;"	m	class:QL_Node
isUpdate	ql.h	/^  bool isUpdate;$/;"	m	class:QL_Manager
isValidAttrType	sm_manager.cc	/^bool SM_Manager::isValidAttrType(AttrInfo attribute){$/;"	f	class:SM_Manager
isValidAttrType	sm_stub.cc	/^bool SM_Manager::isValidAttrType(AttrInfo attribute){$/;"	f	class:SM_Manager
isValidFH	rm_filehandle.cc	/^bool RM_FileHandle::isValidFH() const{$/;"	f	class:RM_FileHandle
isValidFileHeader	rm_filehandle.cc	/^bool RM_FileHandle::isValidFileHeader() const{$/;"	f	class:RM_FileHandle
isValidRID	rm_rid.cc	/^RC RID::isValidRID() const{$/;"	f	class:RID
isValue	ql_node.h	/^  bool isValue; \/\/ whether this is a value or not$/;"	m	struct:Cond
ival	parse.cc	/^    int ival;$/;"	m	union:YYSTYPE	file:
ival	parser_internal.h	/^         int  ival;$/;"	m	struct:node::__anon4::__anon21
ival	y.tab.h	/^    int ival;$/;"	m	union:YYSTYPE
ixm	ql.h	/^  IX_Manager &ixm;$/;"	m	class:QL_Manager
ixm	sm.h	/^  IX_Manager &ixm;$/;"	m	class:SM_Manager
joins	qo.h	/^  int joins;        \/\/ bitmap of rels in (S-a)$/;"	m	struct:costElem
kind	parser_internal.h	/^   NODEKIND kind;$/;"	m	struct:node
last	pf_buffermgr.h	/^    int            last;                          \/\/ LRU page slot$/;"	m	class:PF_BufferMgr
length	ql_node.h	/^  int length; \/\/ length of LHS attribute$/;"	m	struct:Cond
length	sm.h	/^  int length;$/;"	m	struct:Attr
length2	ql_node.h	/^  int length2; \/\/ length of RHS value\/attribute$/;"	m	struct:Cond
less_than	rm_filescan.cc	/^bool less_than(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
less_than_or_eq_to	rm_filescan.cc	/^bool less_than_or_eq_to(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
lhsAttr	parser.h	/^    RelAttr  lhsAttr;    \/* left-hand side attribute            *\/$/;"	m	struct:Condition
lhsRelattr	parser_internal.h	/^         struct node *lhsRelattr;$/;"	m	struct:node::__anon4::__anon18	typeref:struct:node::__anon4::__anon18::node
list_node	nodes.cc	/^NODE *list_node(NODE *n)$/;"	f
listsInitialized	ql_node.h	/^  bool listsInitialized; \/\/ indicator for whether memory has been initialized$/;"	m	class:QL_Node
llStats	statistics.h	/^    LinkList<Statistic> llStats;$/;"	m	class:StatisticsMgr
load_node	nodes.cc	/^NODE *load_node(char *relname, char *filename)$/;"	f
lower	scanhelp.c	/^static int lower(char *dst, char *src, int max)$/;"	f	file:
main	dbcreate.cc	/^int main(int argc, char *argv[])$/;"	f
main	dbdestroy.cc	/^int main(int argc, char *argv[])$/;"	f
main	parser_test.cc	/^int main(void)$/;"	f
main	redbase.cc	/^int main(int argc, char *argv[])$/;"	f
max	printer.h	102;"	d
max	ql_manager.cc	22;"	d	file:
max	qo.h	24;"	d
max	qo_manager.cc	17;"	d	file:
max	sm_manager.cc	16;"	d	file:
maxValue	qo.h	/^  float maxValue; \/\/ maxValue for attribute$/;"	m	struct:attrStat
maxValue	sm.h	/^  float maxValue;$/;"	m	struct:Attr
maxValue	sm.h	/^  float maxValue;$/;"	m	struct:AttrCatEntry
min	printer.h	98;"	d
min	ql_manager.cc	23;"	d	file:
min	qo_manager.cc	18;"	d	file:
minValue	qo.h	/^  float minValue; \/\/ minValue for attribute$/;"	m	struct:attrStat
minValue	sm.h	/^  float minValue;$/;"	m	struct:Attr
minValue	sm.h	/^  float minValue;$/;"	m	struct:AttrCatEntry
mk_attr_infos	interp.cc	/^static int mk_attr_infos(NODE *list, int max, AttrInfo attrInfos[])$/;"	f	file:
mk_conditions	interp.cc	/^static int mk_conditions(NODE *list, int max, Condition conditions[])$/;"	f	file:
mk_rel_attr	interp.cc	/^static void mk_rel_attr(NODE *node, RelAttr &relAttr)$/;"	f	file:
mk_rel_attrs	interp.cc	/^static int mk_rel_attrs(NODE *list, int max, RelAttr relAttrs[])$/;"	f	file:
mk_relations	interp.cc	/^static int mk_relations(NODE *list, int max, char *relations[])$/;"	f	file:
mk_string	scanhelp.c	/^static char *mk_string(char *s, int len)$/;"	f	file:
mk_value	interp.cc	/^static void mk_value(NODE *node, Value &value)$/;"	f	file:
mk_values	interp.cc	/^static int mk_values(NODE *list, int max, Value values[])$/;"	f	file:
n	parse.cc	/^    NODE *n;$/;"	m	union:YYSTYPE	file:
n	y.tab.h	/^    NODE *n;$/;"	m	union:YYSTYPE
nAttrs	ql.h	/^  int nAttrs;$/;"	m	class:QL_Manager
nAttrs	qo.h	/^  int nAttrs; \/\/ # of attributes in selection$/;"	m	class:QO_Manager
nConds	ql.h	/^  int nConds;$/;"	m	class:QL_Manager
nConds	qo.h	/^  int nConds; \/\/ # of conditions in selections$/;"	m	class:QO_Manager
nRels	ql.h	/^  int nRels;$/;"	m	class:QL_Manager
nRels	qo.h	/^  int nRels;  \/\/ # of rels in selection$/;"	m	class:QO_Manager
nequal	node_comps.h	/^bool nequal(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
newRelIndex	qo.h	/^  int newRelIndex;  \/\/ index of a$/;"	m	struct:costElem
new_query	nodes.cc	/^void new_query(void)$/;"	f
newnode	nodes.cc	/^NODE *newnode(NODEKIND kind)$/;"	f
next	linkedlist.h	/^           InternalNode * next;$/;"	m	struct:LinkList::InternalNode
next	parser_internal.h	/^         struct node *next;$/;"	m	struct:node::__anon4::__anon23	typeref:struct:node::__anon4::__anon23::node
next	pf_buffermgr.h	/^    int        next;        \/\/ next in the linked list of buffer pages$/;"	m	struct:PF_BufPageDesc
next	pf_hashtable.h	/^    PF_HashEntry *next;   \/\/ next hash table element or NULL$/;"	m	struct:PF_HashEntry
nextFree	pf_internal.h	/^    int nextFree;       \/\/ nextFree can be any of these values:$/;"	m	struct:PF_PageHdr
nextFreePage	rm_internal.h	/^  PageNum nextFreePage;$/;"	m	struct:RM_PageHeader
ngreater_than	node_comps.h	/^bool ngreater_than(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
ngreater_than_or_eq_to	node_comps.h	/^bool ngreater_than_or_eq_to(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
nless_than	node_comps.h	/^bool nless_than(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
nless_than_or_eq_to	node_comps.h	/^bool nless_than_or_eq_to(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
nnot_equal	node_comps.h	/^bool nnot_equal(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
node	parser_internal.h	/^typedef struct node{$/;"	s
node1	ql_node.h	/^  QL_Node &node1;$/;"	m	class:QL_NodeJoin
node2	ql_node.h	/^  QL_Node &node2;$/;"	m	class:QL_NodeJoin
nodepool	nodes.cc	/^static NODE nodepool[MAXNODE];$/;"	v	file:
nodeptr	nodes.cc	/^static int nodeptr = 0;$/;"	v	file:
not_equal	rm_filescan.cc	/^bool not_equal(void * value1, void * value2, AttrType attrtype, int attrLength){$/;"	f
numAttrsToKeep	ql_node.h	/^  int numAttrsToKeep; \/\/ # of attributes to keep$/;"	m	class:QL_NodeProj
numBuckets	pf_hashtable.h	/^    int numBuckets;                               \/\/ Number of hash table buckets$/;"	m	class:PF_HashTable
numDistinct	sm.h	/^  int numDistinct;$/;"	m	struct:Attr
numDistinct	sm.h	/^  int numDistinct;$/;"	m	struct:AttrCatEntry
numPages	pf.h	/^   int numPages;      \/\/ # of pages in the file$/;"	m	struct:PF_FileHdr
numPages	pf_buffermgr.h	/^    int            numPages;                      \/\/ # of pages in the buffer$/;"	m	class:PF_BufferMgr
numPages	rm.h	/^  int numPages;             \/\/ number of pages$/;"	m	struct:RM_FileHeader
numRecOnPage	rm.h	/^    int numRecOnPage;$/;"	m	class:RM_FileScan
numRecords	rm_internal.h	/^  int numRecords;$/;"	m	struct:RM_PageHeader
numRecordsPerPage	rm.h	/^  int numRecordsPerPage;    \/\/ calculated max # of recs per page$/;"	m	struct:RM_FileHeader
numSeenOnPage	rm.h	/^    int numSeenOnPage;$/;"	m	class:RM_FileScan
numTuples	qo.h	/^  float numTuples;  \/\/ number of tuples of $/;"	m	struct:costElem
numTuples	qo.h	/^  float numTuples; \/\/ num distinct values for this attribute$/;"	m	struct:attrStat
numTuples	sm.h	/^  int numTuples;$/;"	m	struct:RelCatEntry
offset	printer.h	/^    int      offset;                \/\/ Offset of attribute$/;"	m	struct:DataAttrInfo
offset	sm.h	/^  int offset;$/;"	m	struct:Attr
offset	sm.h	/^  int offset;$/;"	m	struct:AttrCatEntry
offset1	ql_node.h	/^  int offset1; \/\/ offset of LHS attribute$/;"	m	struct:Cond
offset2	ql_node.h	/^  int offset2; \/\/ the offset of RHS attribute$/;"	m	struct:Cond
op	parser.h	/^    CompOp   op;         \/* comparison operator                 *\/$/;"	m	struct:Condition
op	parser_internal.h	/^         CompOp op;$/;"	m	struct:node::__anon4::__anon18
openScan	rm.h	/^    bool openScan; \/\/ whether this instance is currently a valid, open scan$/;"	m	class:RM_FileScan
openedFH	rm.h	/^    bool openedFH;$/;"	m	class:RM_FileHandle
operator +	linkedlist.h	/^LinkList<T>::operator+(const LinkList<T> &sourcell) const$/;"	f	class:LinkList
operator +	linkedlist.h	/^LinkList<T>::operator+(const T &element) const$/;"	f	class:LinkList
operator +=	linkedlist.h	/^LinkList<T>::operator+=(const LinkList<T> &list)$/;"	f	class:LinkList
operator +=	linkedlist.h	/^LinkList<T>::operator+=(const T &element)$/;"	f	class:LinkList
operator <<	parse.cc	/^ostream &operator<<(ostream &s, const AttrInfo &ai)$/;"	f
operator <<	parse.cc	/^ostream &operator<<(ostream &s, const AttrType &at)$/;"	f
operator <<	parse.cc	/^ostream &operator<<(ostream &s, const CompOp &op)$/;"	f
operator <<	parse.cc	/^ostream &operator<<(ostream &s, const Condition &c)$/;"	f
operator <<	parse.cc	/^ostream &operator<<(ostream &s, const RelAttr &qa)$/;"	f
operator <<	parse.cc	/^ostream &operator<<(ostream &s, const Value &v)$/;"	f
operator =	linkedlist.h	/^void LinkList<T>::operator = ( const LinkList<T> & sourcell )$/;"	f	class:LinkList
operator =	pf_filehandle.cc	/^PF_FileHandle& PF_FileHandle::operator= (const PF_FileHandle &fileHandle)$/;"	f	class:PF_FileHandle
operator =	pf_pagehandle.cc	/^PF_PageHandle& PF_PageHandle::operator= (const PF_PageHandle &pageHandle)$/;"	f	class:PF_PageHandle
operator =	printer.h	/^    DataAttrInfo& operator=(const DataAttrInfo &d) {$/;"	f	struct:DataAttrInfo
operator =	rm_filehandle.cc	/^RM_FileHandle& RM_FileHandle::operator= (const RM_FileHandle &fileHandle){$/;"	f	class:RM_FileHandle
operator =	rm_record.cc	/^RM_Record& RM_Record::operator= (const RM_Record &record){$/;"	f	class:RM_Record
operator =	rm_rid.cc	/^RID& RID::operator= (const RID &rid){$/;"	f	class:RID
operator =	statistics.cc	/^Statistic& Statistic::operator=(const Statistic &stat)$/;"	f	class:Statistic
operator ==	linkedlist.h	/^Boolean LinkList<T>::operator == ( const LinkList<T> & rhs ) const$/;"	f	class:LinkList
operator ==	rm_rid.cc	/^bool RID::operator== (const RID &rid) const{$/;"	f	class:RID
operator ==	statistics.cc	/^Boolean Statistic::operator==(const char *psKey_) const$/;"	f	class:Statistic
operator T *	linkedlist.h	/^LinkList<T>::operator T * ()$/;"	f	class:LinkList
operator []	linkedlist.h	/^inline T* LinkList<T>::operator[](int index)$/;"	f	class:LinkList
optcost	qo.h	/^  std::vector<std::map<int, costElem*> > optcost;$/;"	m	class:QO_Manager
pBufferMgr	pf.h	/^   PF_BufferMgr *pBufferMgr;                      \/\/ page-buffer manager$/;"	m	class:PF_Manager
pBufferMgr	pf.h	/^   PF_BufferMgr *pBufferMgr;                      \/\/ pointer to buffer manager$/;"	m	class:PF_FileHandle
pData	pf_buffermgr.h	/^    char       *pData;      \/\/ page contents$/;"	m	struct:PF_BufPageDesc
pPageData	pf.h	/^   char *pPageData;                               \/\/ pointer to page data$/;"	m	class:PF_PageHandle
pPfm	parse.cc	/^PF_Manager *pPfm;          \/\/ PF component manager$/;"	v
pQlm	parse.cc	/^QL_Manager *pQlm;          \/\/ QL component manager$/;"	v
pSmm	parse.cc	/^SM_Manager *pSmm;          \/\/ SM component manager$/;"	v
page	rm_rid.h	/^  PageNum page;$/;"	m	class:RID
pageNum	pf.h	/^   int  pageNum;                                  \/\/ page number$/;"	m	class:PF_PageHandle
pageNum	pf_buffermgr.h	/^    PageNum    pageNum;     \/\/ page number for this page$/;"	m	struct:PF_BufPageDesc
pageNum	pf_hashtable.h	/^    PageNum      pageNum; \/\/ page number$/;"	m	struct:PF_HashEntry
pageSize	pf_buffermgr.h	/^    int            pageSize;                      \/\/ Size of pages in the buffer$/;"	m	class:PF_BufferMgr
paramName	parser_internal.h	/^         char *paramName;$/;"	m	struct:node::__anon4::__anon10
parse_format_string	interp.cc	/^static int parse_format_string(char *format_string, AttrType *type, int *len)$/;"	f	file:
parse_tree	parse.cc	/^static NODE *parse_tree;$/;"	v	file:
pfh	rm.h	/^    PF_FileHandle pfh;$/;"	m	class:RM_FileHandle
pfm	parser_test.cc	/^PF_Manager pfm;$/;"	v
pfm	rm.h	/^    PF_Manager &pfm; \/\/ reference to program's PF_Manager$/;"	m	class:RM_Manager
pinCount	pf_buffermgr.h	/^    short int  pinCount;    \/\/ pin count$/;"	m	struct:PF_BufPageDesc
pnHead	linkedlist.h	/^      InternalNode *pnHead;      \/\/ First item$/;"	m	class:LinkList
pnLastRef	linkedlist.h	/^      InternalNode *pnLastRef;   \/\/ Current item$/;"	m	class:LinkList
pnTail	linkedlist.h	/^      InternalNode *pnTail;      \/\/ Last item$/;"	m	class:LinkList
prepend	nodes.cc	/^NODE *prepend(NODE *n, NODE *list)$/;"	f
prev	pf_buffermgr.h	/^    int        prev;        \/\/ prev in the linked list of buffer pages$/;"	m	struct:PF_BufPageDesc
prev	pf_hashtable.h	/^    PF_HashEntry *prev;   \/\/ prev hash table element or NULL$/;"	m	struct:PF_HashEntry
prevNode	ql_node.h	/^  QL_Node &prevNode; \/\/ previous node$/;"	m	class:QL_NodeProj
prevNode	ql_node.h	/^  QL_Node& prevNode;$/;"	m	class:QL_NodeSel
previous	linkedlist.h	/^           InternalNode * previous;$/;"	m	struct:LinkList::InternalNode
printIndex	sm.h	/^  bool printIndex; \/\/ Whether to print the index or not when$/;"	m	class:SM_Manager
printPageStats	sm.h	/^  bool printPageStats;$/;"	m	class:SM_Manager
print_attrtypes	interp.cc	/^static void print_attrtypes(NODE *n)$/;"	f	file:
print_condition	interp.cc	/^static void print_condition(NODE *n)$/;"	f	file:
print_conditions	interp.cc	/^static void print_conditions(NODE *n)$/;"	f	file:
print_error	interp.cc	/^static void print_error(char *errmsg, RC errval)$/;"	f	file:
print_float	comparators.h	/^static bool print_float(void *value, int attrLength){$/;"	f
print_int	comparators.h	/^static bool print_int(void *value, int attrLength){$/;"	f
print_node	nodes.cc	/^NODE *print_node(char *relname)$/;"	f
print_op	interp.cc	/^static void print_op(CompOp op)$/;"	f	file:
print_relations	interp.cc	/^static void print_relations(NODE *n)$/;"	f	file:
print_relattr	interp.cc	/^static void print_relattr(NODE *n)$/;"	f	file:
print_relattrs	interp.cc	/^static void print_relattrs(NODE *n)$/;"	f	file:
print_string	comparators.h	/^static bool print_string(void *value, int attrLength){$/;"	f
print_value	interp.cc	/^static void print_value(NODE *n)$/;"	f	file:
print_values	interp.cc	/^static void print_values(NODE *n)$/;"	f	file:
psHeader	printer.h	/^    char **psHeader;$/;"	m	class:Printer
psKey	statistics.h	/^    char *psKey;$/;"	m	class:Statistic
qlm	ql_node.h	/^  QL_Manager &qlm; \/\/ Reference to QL manager$/;"	m	class:QL_Node
qlm	qo.h	/^  QL_Manager &qlm; \/\/ ql_manager relference$/;"	m	class:QO_Manager
query_node	nodes.cc	/^NODE *query_node(NODE *relattrlist, NODE *rellist, NODE *conditionlist)$/;"	f
real	parser_internal.h	/^typedef float real;$/;"	t
recInsert	sm.h	/^  bool (*recInsert) (char *, std::string, int);$/;"	m	struct:Attr
recInsert_float	sm_manager.cc	/^bool recInsert_float(char *location, string value, int length){$/;"	f
recInsert_float	sm_stub.cc	/^bool recInsert_float(char *location, string value, int length){$/;"	f
recInsert_int	sm_manager.cc	/^bool recInsert_int(char *location, string value, int length){$/;"	f
recInsert_int	sm_stub.cc	/^bool recInsert_int(char *location, string value, int length){$/;"	f
recInsert_string	sm_manager.cc	/^bool recInsert_string(char *location, string value, int length){$/;"	f
recInsert_string	sm_stub.cc	/^bool recInsert_string(char *location, string value, int length){$/;"	f
recordSize	rm.h	/^  int recordSize;           \/\/ record size in file$/;"	m	struct:RM_FileHeader
register_cleanup_function	nodes.cc	/^void register_cleanup_function(void (*func)())$/;"	f
relEntries	ql.h	/^  RelCatEntry *relEntries;$/;"	m	class:QL_Manager
relIdx	ql.h	/^  int relIdx;$/;"	m	struct:QO_Rel
relName	parser.h	/^    char     *relName;    \/\/ Relation name (may be NULL)$/;"	m	struct:RelAttr
relName	parser_internal.h	/^    char *relName;      \/* relation name        *\/$/;"	m	struct:__anon1
relName	printer.h	/^    char     relName[MAXNAME+1];    \/\/ Relation name$/;"	m	struct:DataAttrInfo
relName	ql_node.h	/^  char *relName;$/;"	m	class:QL_NodeRel
relName	sm.h	/^  char relName[MAXNAME + 1];$/;"	m	struct:AttrCatEntry
relName	sm.h	/^  char relName[MAXNAME + 1];$/;"	m	struct:RelCatEntry
relNameInitialized	ql_node.h	/^  bool relNameInitialized;$/;"	m	class:QL_NodeRel
relToAttrIndex	ql.h	/^  std::map<std::string, int> relToAttrIndex;$/;"	m	class:QL_Manager
relToInt	ql.h	/^  std::map<std::string, int> relToInt;$/;"	m	class:QL_Manager
relation_node	nodes.cc	/^NODE *relation_node(char *relname)$/;"	f
relattr	parser_internal.h	/^         struct node *relattr;$/;"	m	struct:node::__anon4::__anon16	typeref:struct:node::__anon4::__anon16::node
relattr	parser_internal.h	/^         struct node *relattr;$/;"	m	struct:node::__anon4::__anon19	typeref:struct:node::__anon4::__anon19::node
relattr_node	nodes.cc	/^NODE *relattr_node(char *relname, char *attrname)$/;"	f
relattr_or_value_node	nodes.cc	/^NODE *relattr_or_value_node(NODE *relattr, NODE *value)$/;"	f
relattrlist	parser_internal.h	/^         struct node *relattrlist;$/;"	m	struct:node::__anon4::__anon13	typeref:struct:node::__anon4::__anon13::node
relcatFH	sm.h	/^  RM_FileHandle relcatFH;$/;"	m	class:SM_Manager
rellist	parser_internal.h	/^         struct node *rellist;$/;"	m	struct:node::__anon4::__anon13	typeref:struct:node::__anon4::__anon13::node
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon11
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon12
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon14
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon15
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon16
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon17
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon22
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon5
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon6
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon7
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon8
relname	parser_internal.h	/^         char *relname;$/;"	m	struct:node::__anon4::__anon9
relorvalue	parser_internal.h	/^         struct node *relorvalue;$/;"	m	struct:node::__anon4::__anon16	typeref:struct:node::__anon4::__anon16::node
rels	qo.h	/^  RelCatEntry *rels; \/\/ pointer to array of RelCatEntries for this selection$/;"	m	class:QO_Manager
reset_charptr	scanhelp.c	/^void reset_charptr(void)$/;"	f
reset_parser	nodes.cc	/^void reset_parser(void)$/;"	f
reset_scanner	scanhelp.c	/^void reset_scanner(void)$/;"	f
rhsAttr	parser.h	/^    RelAttr  rhsAttr;    \/* right-hand side attribute            *\/$/;"	m	struct:Condition
rhsRelattr	parser_internal.h	/^         struct node *rhsRelattr;$/;"	m	struct:node::__anon4::__anon18	typeref:struct:node::__anon4::__anon18::node
rhsValue	parser.h	/^    Value    rhsValue;   \/* right-hand side value                *\/$/;"	m	struct:Condition
rhsValue	parser_internal.h	/^         struct node *rhsValue;$/;"	m	struct:node::__anon4::__anon18	typeref:struct:node::__anon4::__anon18::node
rid	rm.h	/^    RID rid;        \/\/ record RID$/;"	m	class:RM_Record
rmm	ql.h	/^  RM_Manager &rmm;$/;"	m	class:QL_Manager
rmm	sm.h	/^  RM_Manager &rmm;$/;"	m	class:SM_Manager
rval	parse.cc	/^    float rval;$/;"	m	union:YYSTYPE	file:
rval	parser_internal.h	/^         real rval;$/;"	m	struct:node::__anon4::__anon21
rval	y.tab.h	/^    float rval;$/;"	m	union:YYSTYPE
scanEnded	rm.h	/^    bool scanEnded;$/;"	m	class:RM_FileScan
scanPage	rm.h	/^    PageNum scanPage;$/;"	m	class:RM_FileScan
scanSlot	rm.h	/^    SlotNum scanSlot;$/;"	m	class:RM_FileScan
set_node	nodes.cc	/^NODE *set_node(char *paramName, char *string)$/;"	f
shell_cmd	scan.cc	508;"	d	file:
short	parse.cc	282;"	d	file:
size	rm.h	/^    int size;       \/\/ size of the malloc$/;"	m	class:RM_Record
slot	pf_hashtable.h	/^    int          slot;    \/\/ slot of this page in the buffer$/;"	m	struct:PF_HashEntry
slot	rm_rid.h	/^  SlotNum slot;$/;"	m	class:RID
smm	ql.h	/^  SM_Manager &smm;$/;"	m	class:QL_Manager
spaces	printer.h	/^    int *spaces;$/;"	m	class:Printer
statsInitialized	sm.h	/^  bool statsInitialized;$/;"	m	struct:RelCatEntry
string	parser_internal.h	/^         char *string;$/;"	m	struct:node::__anon4::__anon10
string_alloc	scanhelp.c	/^static char *string_alloc(int len)$/;"	f	file:
sval	parse.cc	/^    char *sval;$/;"	m	union:YYSTYPE	file:
sval	parser_internal.h	/^         char *sval;$/;"	m	struct:node::__anon4::__anon21
sval	y.tab.h	/^    char *sval;$/;"	m	union:YYSTYPE
tupleLength	ql_node.h	/^  int tupleLength; \/\/ the length of a tuple in this node$/;"	m	class:QL_Node
tupleLength	sm.h	/^  int tupleLength;$/;"	m	struct:RelCatEntry
type	parser.h	/^    AttrType type;         \/* type of value               *\/$/;"	m	struct:Value
type	parser_internal.h	/^         AttrType type;$/;"	m	struct:node::__anon4::__anon21
type	parser_internal.h	/^         char *type;$/;"	m	struct:node::__anon4::__anon20
type	ql_node.h	/^  AttrType type; \/\/ attribute type$/;"	m	struct:Cond
type	sm.h	/^  int type;$/;"	m	struct:Attr
u	parser_internal.h	/^   } u;$/;"	m	struct:node	typeref:union:node::__anon4
unixfd	pf.h	/^   int unixfd;                                    \/\/ OS file descriptor$/;"	m	class:PF_FileHandle
unput	scan.cc	188;"	d	file:
update_node	nodes.cc	/^NODE *update_node(char *relname, NODE *relattr, NODE *relorvalue, $/;"	f
useIndex	ql_node.h	/^  bool useIndex; \/\/ whether to use the index$/;"	m	class:QL_NodeRel
useIndexJoin	ql_node.h	/^   bool useIndexJoin;$/;"	m	class:QL_Node
useIndexJoin	ql_node.h	/^  bool useIndexJoin;$/;"	m	class:QL_NodeJoin
useNextPage	rm.h	/^    bool useNextPage;$/;"	m	class:RM_FileScan
useQO	sm.h	/^  bool useQO;$/;"	m	class:SM_Manager
valLength	parser_internal.h	/^    int valLength;      \/* length if type = STRING *\/$/;"	m	struct:__anon2
valType	parser_internal.h	/^    AttrType valType;   \/* type of value        *\/$/;"	m	struct:__anon2
validIterator	sm.h	/^  bool validIterator;$/;"	m	class:SM_AttrIterator
value	parser_internal.h	/^         struct node *value;$/;"	m	struct:node::__anon4::__anon19	typeref:struct:node::__anon4::__anon19::node
value	parser_internal.h	/^    void *value;        \/* value for attribute  *\/$/;"	m	struct:__anon2
value	ql_node.h	/^  void *value;  \/\/ equality value for index$/;"	m	class:QL_NodeRel
value	rm.h	/^    void *value;$/;"	m	class:RM_FileScan
value_node	nodes.cc	/^NODE *value_node(AttrType type, void *value)$/;"	f
valuelist	parser_internal.h	/^         struct node *valuelist;$/;"	m	struct:node::__anon4::__anon14	typeref:struct:node::__anon4::__anon14::node
yy_accept	scan.cc	/^static yyconst flex_int16_t yy_accept[43] =$/;"	v	file:
yy_at_bol	scan.cc	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	scan.cc	/^static yyconst flex_int16_t yy_base[47] =$/;"	v	file:
yy_bs_column	scan.cc	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	scan.cc	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	scan.cc	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	scan.cc	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	scan.cc	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	scan.cc	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	scan.cc	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	scan.cc	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	scan.cc	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	scan.cc	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	scan.cc	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	scan.cc	/^static yyconst flex_int16_t yy_chk[75] =$/;"	v	file:
yy_create_buffer	scan.cc	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	scan.cc	/^static yyconst flex_int16_t yy_def[47] =$/;"	v	file:
yy_delete_buffer	scan.cc	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	scan.cc	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	scan.cc	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	scan.cc	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	scan.cc	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	scan.cc	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	scan.cc	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	scan.cc	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	scan.cc	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	scan.cc	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	scan.cc	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	scan.cc	/^static char yy_hold_char;$/;"	v	file:
yy_init	scan.cc	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	scan.cc	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	scan.cc	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	scan.cc	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	scan.cc	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	scan.cc	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	scan.cc	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	scan.cc	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	scan.cc	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	scan.cc	/^static yyconst flex_int32_t yy_meta[18] =$/;"	v	file:
yy_n_chars	scan.cc	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	scan.cc	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	scan.cc	317;"	d	file:
yy_nxt	scan.cc	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	scan.cc	/^static yyconst flex_int16_t yy_nxt[75] =$/;"	v	file:
yy_reduce_print	parse.cc	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	scan.cc	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	scan.cc	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	scan.cc	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	scan.cc	329;"	d	file:
yy_set_interactive	scan.cc	319;"	d	file:
yy_size_t	scan.cc	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	parse.cc	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	scan.cc	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	scan.cc	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	scan.cc	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	parse.cc	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	parse.cc	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	scan.cc	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	scan.cc	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	scan.cc	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	parse.cc	/^union yyalloc$/;"	u	file:
yyalloc	scan.cc	/^void *yyalloc (yy_size_t  size )$/;"	f
yychar	parse.cc	/^int yychar;$/;"	v
yycheck	parse.cc	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	parse.cc	793;"	d	file:
yyconst	scan.cc	106;"	d	file:
yyconst	scan.cc	108;"	d	file:
yydebug	parse.cc	/^int yydebug;$/;"	v
yydefact	parse.cc	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	parse.cc	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	parse.cc	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	scan.cc	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	parse.cc	792;"	d	file:
yyerror	parse.cc	/^void yyerror(char const *s) \/\/ New in 2000$/;"	f
yyfree	scan.cc	/^void yyfree (void * ptr )$/;"	f
yyget_debug	scan.cc	/^int yyget_debug  (void)$/;"	f
yyget_in	scan.cc	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	scan.cc	/^int yyget_leng  (void)$/;"	f
yyget_lineno	scan.cc	/^int yyget_lineno  (void)$/;"	f
yyget_out	scan.cc	/^FILE *yyget_out  (void)$/;"	f
yyget_text	scan.cc	/^char *yyget_text  (void)$/;"	f
yyin	scan.cc	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	scan.cc	/^    static int yyinput (void)$/;"	f	file:
yyleng	scan.cc	/^int yyleng;$/;"	v
yyless	scan.cc	1715;"	d	file:
yyless	scan.cc	1716;"	d	file:
yyless	scan.cc	175;"	d	file:
yylex_destroy	scan.cc	/^int yylex_destroy  (void)$/;"	f
yylineno	scan.cc	/^int yylineno = 1;$/;"	v
yylval	parse.cc	/^YYSTYPE yylval;$/;"	v
yymore	scan.cc	479;"	d	file:
yynerrs	parse.cc	/^int yynerrs;$/;"	v
yyout	scan.cc	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	parse.cc	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypact_value_is_default	parse.cc	750;"	d	file:
yyparse	parse.cc	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	parse.cc	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypop_buffer_state	scan.cc	/^void yypop_buffer_state (void)$/;"	f
yyprhs	parse.cc	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yypush_buffer_state	scan.cc	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	parse.cc	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	parse.cc	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	scan.cc	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	scan.cc	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	parse.cc	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	parse.cc	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	scan.cc	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	scan.cc	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	scan.cc	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	scan.cc	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	parse.cc	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	parse.cc	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	parse.cc	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	parse.cc	1089;"	d	file:
yystrlen	parse.cc	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	parse.cc	1066;"	d	file:
yystype	parse.cc	270;"	d	file:
yystype	y.tab.h	142;"	d
yysyntax_error	parse.cc	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	parse.cc	/^static const yytype_int16 yytable[] =$/;"	v	file:
yytable_value_is_error	parse.cc	753;"	d	file:
yyterminate	scan.cc	644;"	d	file:
yytext	scan.cc	/^char *yytext;$/;"	v
yytext_ptr	scan.cc	354;"	d	file:
yytname	parse.cc	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	parse.cc	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	parse.cc	/^   enum yytokentype {$/;"	g	file:
yytokentype	y.tab.h	/^   enum yytokentype {$/;"	g
yytoknum	parse.cc	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	parse.cc	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	parse.cc	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	parse.cc	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	parse.cc	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	parse.cc	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	parse.cc	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	parse.cc	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	parse.cc	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	parse.cc	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	parse.cc	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	scan.cc	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyvs_alloc	parse.cc	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	redbase.h	21;"	d
~IX_IndexHandle	ix_indexhandle.cc	/^IX_IndexHandle::~IX_IndexHandle()$/;"	f	class:IX_IndexHandle
~IX_IndexScan	ix_indexscan.cc	/^IX_IndexScan::~IX_IndexScan()$/;"	f	class:IX_IndexScan
~IX_Manager	ix_manager.cc	/^IX_Manager::~IX_Manager()$/;"	f	class:IX_Manager
~LinkList	linkedlist.h	/^inline LinkList<T>::~LinkList()$/;"	f	class:LinkList
~Node_Proj	node_proj.cc	/^Node_Proj::~Node_Proj(){$/;"	f	class:Node_Proj
~Node_Rel	node_rel.cc	/^Node_Rel::~Node_Rel(){$/;"	f	class:Node_Rel
~PF_BufferMgr	pf_buffermgr.cc	/^PF_BufferMgr::~PF_BufferMgr()$/;"	f	class:PF_BufferMgr
~PF_FileHandle	pf_filehandle.cc	/^PF_FileHandle::~PF_FileHandle()$/;"	f	class:PF_FileHandle
~PF_HashTable	pf_hashtable.cc	/^PF_HashTable::~PF_HashTable()$/;"	f	class:PF_HashTable
~PF_Manager	pf_manager.cc	/^PF_Manager::~PF_Manager()$/;"	f	class:PF_Manager
~PF_PageHandle	pf_pagehandle.cc	/^PF_PageHandle::~PF_PageHandle()$/;"	f	class:PF_PageHandle
~Printer	printer.cc	/^Printer::~Printer()$/;"	f	class:Printer
~QL_Manager	ql_manager.cc	/^QL_Manager::~QL_Manager()$/;"	f	class:QL_Manager
~QL_Manager	ql_manager_stub.cc	/^QL_Manager::~QL_Manager()$/;"	f	class:QL_Manager
~QL_Node	node.cc	/^QL_Node::~QL_Node(){$/;"	f	class:QL_Node
~QL_Node	ql_node.cc	/^QL_Node::~QL_Node(){$/;"	f	class:QL_Node
~QL_NodeJoin	ql_nodejoin.cc	/^QL_NodeJoin::~QL_NodeJoin(){$/;"	f	class:QL_NodeJoin
~QL_NodeProj	ql_nodeproj.cc	/^QL_NodeProj::~QL_NodeProj(){$/;"	f	class:QL_NodeProj
~QL_NodeRel	ql_noderel.cc	/^QL_NodeRel::~QL_NodeRel(){$/;"	f	class:QL_NodeRel
~QL_NodeSel	ql_nodesel.cc	/^QL_NodeSel::~QL_NodeSel(){$/;"	f	class:QL_NodeSel
~QO_Manager	qo_manager.cc	/^QO_Manager::~QO_Manager(){$/;"	f	class:QO_Manager
~RID	rm_rid.cc	/^RID::~RID(){}$/;"	f	class:RID
~RM_FileHandle	rm_filehandle.cc	/^RM_FileHandle::~RM_FileHandle(){$/;"	f	class:RM_FileHandle
~RM_FileScan	rm_filescan.cc	/^RM_FileScan::~RM_FileScan(){$/;"	f	class:RM_FileScan
~RM_Manager	rm_manager.cc	/^RM_Manager::~RM_Manager(){$/;"	f	class:RM_Manager
~RM_Record	rm_record.cc	/^RM_Record::~RM_Record(){$/;"	f	class:RM_Record
~SM_AttrIterator	sm_attriterator.cc	/^SM_AttrIterator::~SM_AttrIterator(){$/;"	f	class:SM_AttrIterator
~SM_Manager	sm_manager.cc	/^SM_Manager::~SM_Manager()$/;"	f	class:SM_Manager
~SM_Manager	sm_stub.cc	/^SM_Manager::~SM_Manager()$/;"	f	class:SM_Manager
~Statistic	statistics.cc	/^Statistic::~Statistic()$/;"	f	class:Statistic
~StatisticsMgr	statistics.h	/^    ~StatisticsMgr() {};$/;"	f	class:StatisticsMgr
